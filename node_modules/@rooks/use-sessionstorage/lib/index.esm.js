import { useReducer, useEffect, useCallback } from 'react';

function reducer(state, action) {
    switch (action.type) {
        case "set":
            return (state = action.payload);
        default:
            return state;
    }
}
/**
 * useSessionstorage
 * Tracks a value within sessionStorage and updates it
 * @param key Key of the value to be stored
 * @param defaultValue Default value of the stored item
 */
function useSessionstorage(key, defaultValue = null) {
    const [value, dispatch] = useReducer(reducer, getValueFromSessionStorage());
    function init() {
        const initialValue = getValueFromSessionStorage();
        if (initialValue === null || initialValue === "null") {
            set(defaultValue);
        }
    }
    function getValueFromSessionStorage() {
        if (typeof sessionStorage === "undefined") {
            return null;
        }
        const storedValue = sessionStorage.getItem(key) || "null";
        try {
            return JSON.parse(storedValue);
        }
        catch (err) {
            console.error(err);
        }
        return storedValue;
    }
    function saveValueToSessionStorage(key, value) {
        if (typeof sessionStorage === "undefined") {
            return null;
        }
        return sessionStorage.setItem(key, JSON.stringify(value));
    }
    function setValue(value) {
        dispatch({
            type: "set",
            payload: value
        });
    }
    function set(newValue) {
        saveValueToSessionStorage(key, newValue);
        setValue(newValue);
    }
    function remove() {
        if (typeof sessionStorage === "undefined") {
            return null;
        }
        sessionStorage.removeItem(key);
        setValue(null);
    }
    useEffect(() => {
        init();
    }, []);
    const listen = useCallback((e) => {
        if (e.storageArea === sessionStorage && e.key === key) {
            set(e.newValue);
        }
    }, []);
    useEffect(() => {
        window.addEventListener("storage", listen);
        return () => {
            window.removeEventListener("storage", listen);
        };
    }, []);
    let handler;
    handler = [value, set, remove];
    handler.value = value;
    handler.set = set;
    handler.remove = remove;
    return handler;
}

export default useSessionstorage;
//# sourceMappingURL=index.esm.js.map
