import{useState as t}from"react";const e={local:"localStorage",session:"sessionStorage",default:"localStorage"};class s{constructor({key:t,storage:e,isSupported:s}={}){this.key=t,this.storage=e,this.isSupported=s,this.store=this.storageInstance()}storageInstance(){const t=e[this.storage]||e.default;return window[t]}lsSet(t){this.store.setItem(this.key,JSON.stringify(t))}lsGet(){return JSON.parse(this.store[this.key]||"{}")}lsClean(){this.lsSet("")}get(t,e){if(!this.isSupported)return null;const s=this.lsGet()[t];return void 0!==s?s:e}set(t,e){return this.isSupported?(this.lsSet({...this.lsGet(),[t]:e}),e):null}remove(t){return this.isSupported?this.set(t):null}clean(){return this.isSupported?this.lsClean():null}}function o(e){const o=new s(e),r=(t,e)=>(e&&o.set(t,e),o.get(t));return{storage:o,useStorage:(e,s)=>{const[o,i]=t((()=>r(e,s)));return[o,t=>{r(e,t),i(t)}]}}}const r={key:"react-hook-storage",storage:"local",isSupported:!0};function i(t={}){if("undefined"!=typeof process&&(process.server||process.SERVER_BUILD))return;const{key:e,storage:s,isSupported:i}=t,n={...r,key:e||r.key,storage:s||r.storage,isSupported:void 0!==i?i:r.isSupported};try{const t="react-hook-storage-test";window.localStorage.setItem(t,t),window.localStorage.removeItem(t)}catch(t){n.isSupported=!1,console.error("Local or Session storage is not supported")}return new o(n)}export default i;
//# sourceMappingURL=react-hook-storage.es.js.map
