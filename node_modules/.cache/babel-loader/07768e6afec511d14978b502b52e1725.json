{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\Overture\\\\DevOTWebUI\\\\src\\\\components\\\\common\\\\TextFieldPhoneNumber\\\\index.js\";\nimport React from \"react\";\nimport './textinput.css';\nimport PhoneInput from 'react-number-format'; //mport 'react-phone-number-input/style.css';\n//var NumberFormat = require('react-number-format');\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default (props => {\n  const divClass = props.divClass ? props.divClass : 'col-lg-6 col-md-12';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: divClass,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [!props.noLabel && /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: props.name,\n        children: props.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(PhoneInput, {\n        type: \"text\",\n        className: \"form-control\",\n        id: props.name,\n        value: props.value,\n        placeholder: props.placeholder,\n        name: props.name,\n        autoFocus: props.autoFocus,\n        format: \"###-###-####\",\n        onValueChange: (values, sourceInfo) => {\n          const {\n            formattedValue,\n            value\n          } = values; // Event is a Synthetic Event wrapper which holds target and other information. Source tells whether the reason for this function being triggered was an 'event' or due to a 'prop' change\n\n          const {\n            event,\n            source\n          } = props.updateValue(sourceInfo);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this), props.errors && props.errors.map(error => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invalid-input\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 61\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n});","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/components/common/TextFieldPhoneNumber/index.js"],"names":["React","PhoneInput","props","divClass","noLabel","name","label","value","placeholder","autoFocus","values","sourceInfo","formattedValue","event","source","updateValue","errors","map","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AACA,OAAOC,UAAP,MAAuB,qBAAvB,C,CACA;AACA;;;AACA,gBAAgBC,KAAD,IAAW;AACtB,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAN,GAAiBD,KAAK,CAACC,QAAvB,GAAkC,oBAAnD;AACA,sBACI;AAAK,IAAA,SAAS,EAAEA,QAAhB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,iBACM,CAACD,KAAK,CAACE,OAAP,iBAAkB;AAAO,QAAA,OAAO,EAAEF,KAAK,CAACG,IAAtB;AAAA,kBAA6BH,KAAK,CAACI;AAAnC;AAAA;AAAA;AAAA;AAAA,cADxB,eAEI,QAAC,UAAD;AAAY,QAAA,IAAI,EAAC,MAAjB;AAAwB,QAAA,SAAS,EAAC,cAAlC;AAAiD,QAAA,EAAE,EAAEJ,KAAK,CAACG,IAA3D;AAAiE,QAAA,KAAK,EAAEH,KAAK,CAACK,KAA9E;AACO,QAAA,WAAW,EAAEL,KAAK,CAACM,WAD1B;AACuC,QAAA,IAAI,EAAEN,KAAK,CAACG,IADnD;AAGQ,QAAA,SAAS,EAAEH,KAAK,CAACO,SAHzB;AAGoC,QAAA,MAAM,EAAC,cAH3C;AAIQ,QAAA,aAAa,EAAE,CAACC,MAAD,EAASC,UAAT,KAAwB;AACnC,gBAAM;AAAEC,YAAAA,cAAF;AAAkBL,YAAAA;AAAlB,cAA4BG,MAAlC,CADmC,CAEnC;;AACA,gBAAM;AAAEG,YAAAA,KAAF;AAASC,YAAAA;AAAT,cAAoBZ,KAAK,CAACa,WAAN,CAAkBJ,UAAlB,CAA1B;AACD;AARX;AAAA;AAAA;AAAA;AAAA,cAFJ,EAsBKT,KAAK,CAACc,MAAN,IAAgBd,KAAK,CAACc,MAAN,CAAaC,GAAb,CAAiBC,KAAK,iBAAK;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,kBAAgCA;AAAhC;AAAA;AAAA;AAAA;AAAA,cAA3B,CAtBrB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH,CA9BD","sourcesContent":["import React from \"react\";\nimport './textinput.css';\nimport PhoneInput from 'react-number-format'\n//mport 'react-phone-number-input/style.css';\n//var NumberFormat = require('react-number-format');\nexport default (props) => {\n    const divClass = props.divClass ? props.divClass : 'col-lg-6 col-md-12';\n    return(\n        <div className={divClass}>\n            <div className=\"form-group\">\n                { !props.noLabel && <label htmlFor={props.name}>{props.label}</label> }\n                <PhoneInput type=\"text\" className=\"form-control\" id={props.name} value={props.value}\n                       placeholder={props.placeholder} name={props.name}\n                       \n                        autoFocus={props.autoFocus} format=\"###-###-####\" \n                        onValueChange={(values, sourceInfo) => {\n                            const { formattedValue, value } = values;\n                            // Event is a Synthetic Event wrapper which holds target and other information. Source tells whether the reason for this function being triggered was an 'event' or due to a 'prop' change\n                            const { event, source } = props.updateValue(sourceInfo);\n                          }}\n                        />\n    \n{/*<PhoneInput\n       \n        value=\"\"\n        prefix=\"\"\n        displayType=\"input\"\n        type=\"text\"\n        allowNegative={true}\n        format=\"###-###-####\" onValueChange={(event) => props.updateValue(event.target)} />\n*/}\n                {props.errors && props.errors.map(error => (<div className=\"invalid-input\">{error}</div>))}\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}