{"ast":null,"code":"import { setPersonalInfo, setCityState, setMasterData, addSpokenLanguagesList, removeSpokenLanguagesList } from './slice';\nimport { setError, resetError } from \"../slice\";\nimport { setLoading } from \"../../common/Loader/slice\";\nimport requestUtil from '../../../helpers/requestUtil';\nimport { nextTab } from \"../action\";\nimport { updateProfileFlag } from '../../Login/action';\nexport function updatePersonalInfo(data) {\n  return async dispatch => {\n    dispatch(setPersonalInfo(data));\n  };\n}\nexport function resetErrorStatus() {\n  return async dispatch => {\n    dispatch(resetError());\n  };\n}\nexport function getCurrentPersonalInfo(_ref) {\n  let {\n    url,\n    userId\n  } = _ref;\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const response = await requestUtil(`${url}/${userId}`, 'GET');\n      dispatch(setPersonalInfo(response));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function savePersonalInfo(_ref2) {\n  let {\n    url,\n    candidateId,\n    userId,\n    gotoNextTab = true\n  } = _ref2;\n  return async (dispatch, getState) => {\n    dispatch(setLoading(true));\n    const {\n      data\n    } = getState().personalInfo;\n\n    try {\n      await requestUtil(`${url}`, 'POST', {\n        appUserId: userId,\n        candidateId,\n        ...data,\n        spokenLanguagesList: data.spokenLanguagesList.map(item => item.id),\n        emergencyContact: { ...data.emergencyContact,\n          relationship: data.emergencyContact.relationship[0].name\n        }\n      });\n\n      if (gotoNextTab) {\n        dispatch(nextTab());\n        dispatch(updateProfileFlag('isPersonalInfoTabCompleted'));\n      }\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function getCityState(url) {\n  return async dispatch => {\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setCityState(response));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n  };\n}\nexport function loadMasterData(baseUrl) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const languages = await requestUtil(`${baseUrl}/Dropdown/GetSpokenLanguages`, 'GET');\n      const relationships = await requestUtil(`${baseUrl}/Dropdown/GetEmergencyContactRelationships`, 'GET');\n      dispatch(setMasterData({\n        languages,\n        relationships\n      }));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function updateLanguageList(lang, action) {\n  return dispatch => {\n    switch (action) {\n      case 'add':\n        dispatch(addSpokenLanguagesList(lang));\n        break;\n\n      case 'remove':\n        dispatch(removeSpokenLanguagesList(lang));\n        break;\n\n      default:\n        break;\n    }\n  };\n}","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI_LocalDevelopment/src/components/ProfileBuilder/PersonalInfo/action.js"],"names":["setPersonalInfo","setCityState","setMasterData","addSpokenLanguagesList","removeSpokenLanguagesList","setError","resetError","setLoading","requestUtil","nextTab","updateProfileFlag","updatePersonalInfo","data","dispatch","resetErrorStatus","getCurrentPersonalInfo","url","userId","response","error","message","savePersonalInfo","candidateId","gotoNextTab","getState","personalInfo","appUserId","spokenLanguagesList","map","item","id","emergencyContact","relationship","name","getCityState","loadMasterData","baseUrl","languages","relationships","updateLanguageList","lang","action"],"mappings":"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","sourcesContent":["import {setPersonalInfo, setCityState, setMasterData, addSpokenLanguagesList, removeSpokenLanguagesList} from './slice';\nimport {setError, resetError} from \"../slice\";\nimport {setLoading} from \"../../common/Loader/slice\";\nimport requestUtil from '../../../helpers/requestUtil';\nimport {nextTab} from \"../action\";\nimport {updateProfileFlag} from '../../Login/action';\n\nexport function updatePersonalInfo(data) {\n    return async dispatch => {\n        dispatch(setPersonalInfo(data));\n    };\n}\n\nexport function resetErrorStatus() {\n    return async dispatch => {\n        dispatch(resetError());\n    };\n}\n\nexport function getCurrentPersonalInfo({url, userId}) {\n    return async dispatch => {\n        dispatch(setLoading(true));\n        try {\n            const response = await requestUtil(`${url}/${userId}`, 'GET');\n            dispatch(setPersonalInfo(response));\n        } catch (error) {\n            dispatch(setError(error.message))\n        }\n        dispatch(setLoading(false));\n    };\n}\n\nexport function savePersonalInfo({url, candidateId, userId, gotoNextTab = true}) {\n    return async (dispatch, getState) => {\n        dispatch(setLoading(true));\n        const {data} = getState().personalInfo;\n        try {\n            await requestUtil(`${url}`, 'POST', {\n                appUserId: userId,\n                candidateId,\n                ...data,\n                spokenLanguagesList: data.spokenLanguagesList.map(item => item.id),\n                emergencyContact: {\n                    ...data.emergencyContact,\n                    relationship: data.emergencyContact.relationship[0].name\n                }\n            });\n            if (gotoNextTab) {\n                dispatch(nextTab());\n                dispatch(updateProfileFlag('isPersonalInfoTabCompleted'));\n            }\n        } catch (error) {\n            dispatch(setError(error.message));\n        }\n        dispatch(setLoading(false));\n    };\n}\n\nexport function getCityState(url) {\n    return async dispatch => {\n        try {\n            const response = await requestUtil(url, 'GET');\n            dispatch(setCityState(response));\n        } catch (error) {\n            dispatch(setError(error.message))\n        }\n    };\n}\n\nexport function loadMasterData(baseUrl) {\n    return async dispatch => {\n        dispatch(setLoading(true));\n        try {\n            const languages = await requestUtil(`${baseUrl}/Dropdown/GetSpokenLanguages`, 'GET');\n            const relationships = await requestUtil(`${baseUrl}/Dropdown/GetEmergencyContactRelationships`, 'GET');\n            dispatch(setMasterData({languages, relationships}));\n        } catch (error) {\n            dispatch(setError(error.message))\n        }\n        dispatch(setLoading(false));\n    };\n}\n\nexport function updateLanguageList(lang, action) {\n    return (dispatch) => {\n        switch (action) {\n            case 'add':\n                dispatch(addSpokenLanguagesList(lang));\n                break;\n            case 'remove':\n                dispatch(removeSpokenLanguagesList(lang));\n                break;\n            default:\n                break;\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}