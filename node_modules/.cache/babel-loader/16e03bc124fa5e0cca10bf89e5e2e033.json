{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport useConfiguration from \"./useConfiguration\";\n\nfunction useValidation() {\n  _s();\n\n  const config = useConfiguration();\n\n  function validate(formName, values) {\n    const validationResult = {\n      valid: true,\n      errors: {}\n    };\n\n    const isEmptyObject = value => {\n      return typeof value === 'object' && Object.keys(value).length === 0;\n    };\n\n    const isEmpty = value => {\n      return value === undefined || value === null || (value.trim && value.trim()) === '' || isEmptyObject(value);\n    };\n\n    if (!config.validations) {\n      return validationResult;\n    }\n\n    const validationConfig = config.validations[formName];\n    values.map(value => {\n      const validationObj = validationConfig[value.name] || {};\n      validationResult.errors[value.name] = [];\n\n      if (validationObj.required && (isEmpty(value.data) || value.data.length === 0)) {\n        validationResult.errors[value.name].push(\"This field is required\");\n        validationResult.valid = false;\n      }\n\n      if (validationObj.min && value.data && value.data.length < validationObj.min) {\n        validationResult.errors[value.name].push(`At least ${validationObj.min} characters long`);\n        validationResult.valid = false;\n      }\n\n      if (validationObj.max && value.data && value.data.length > validationObj.max) {\n        validationResult.errors[value.name].push(`At most ${validationObj.max} characters long`);\n        validationResult.valid = false;\n      }\n\n      if (validationObj.pattern && value.data) {\n        const regex = new RegExp(validationObj.pattern);\n\n        if (!regex.test(value.data)) {\n          validationResult.errors[value.name].push(validationObj.message || `This field has invalid pattern`);\n          validationResult.valid = false;\n        }\n      }\n    });\n    return validationResult;\n  }\n\n  return validate;\n}\n\n_s(useValidation, \"FH0EXNHWozJ2PEsmh9b8wzq3svM=\", false, function () {\n  return [useConfiguration];\n});\n\nexport default useValidation;","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/hooks/useValidation.js"],"names":["useConfiguration","useValidation","config","validate","formName","values","validationResult","valid","errors","isEmptyObject","value","Object","keys","length","isEmpty","undefined","trim","validations","validationConfig","map","validationObj","name","required","data","push","min","max","pattern","regex","RegExp","test","message"],"mappings":"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","sourcesContent":["import useConfiguration from \"./useConfiguration\";\n\nfunction useValidation() {\n    const config = useConfiguration();\n    function validate(formName, values) {\n\n        const validationResult = {\n            valid: true,\n            errors: {}\n        };\n        const isEmptyObject = (value) => {\n            return typeof value === 'object' && Object.keys(value).length === 0;\n        }\n        const isEmpty = (value) => {\n            return value === undefined || value === null || (value.trim && value.trim()) === '' || isEmptyObject(value);\n        };\n        if(!config.validations){\n            return validationResult;\n        }\n        const validationConfig = config.validations[formName];\n        values.map(value => {\n            const validationObj = validationConfig[value.name] || {};\n            validationResult.errors[value.name] = [];\n            if (validationObj.required && (isEmpty(value.data) || value.data.length === 0)) {\n                validationResult.errors[value.name].push(\"This field is required\");\n                validationResult.valid = false;\n            }\n            if (validationObj.min && value.data && value.data.length < validationObj.min) {\n                validationResult.errors[value.name].push(`At least ${validationObj.min} characters long`);\n                validationResult.valid = false;\n            }\n            if (validationObj.max && value.data && value.data.length > validationObj.max) {\n                validationResult.errors[value.name].push(`At most ${validationObj.max} characters long`);\n                validationResult.valid = false;\n            }\n            if (validationObj.pattern && value.data) {\n                const regex = new RegExp(validationObj.pattern);\n                if (!regex.test(value.data)) {\n                    validationResult.errors[value.name].push(validationObj.message || `This field has invalid pattern`);\n                    validationResult.valid = false;\n                }\n            }\n        });\n        return validationResult;\n    }\n    return validate;\n}\nexport default useValidation;\n"]},"metadata":{},"sourceType":"module"}