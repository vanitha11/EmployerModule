{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialData = {\n  firstName: '',\n  lastName: '',\n  email: '',\n  zipcode: '',\n  streetAddress: '',\n  city: '',\n  stateName: '',\n  cellPhoneNumber: '',\n  homePhoneNumber: '',\n  alternatePhoneNumber: '',\n  emergencyContact: {\n    firstName: '',\n    lastName: '',\n    phoneNumber: '',\n    relationship: []\n  },\n  references: [{\n    firstName: '',\n    lastName: '',\n    phoneNumber: ''\n  }],\n  spokenLanguagesList: [],\n  jobDomainId: 1,\n  jobTypeId: 1\n};\nconst initialState = {\n  data: initialData,\n  masterData: {\n    languages: [],\n    relationships: []\n  },\n  summaryData: initialData\n};\nexport const personalInfoSlice = createSlice({\n  name: 'personalInfo',\n  initialState,\n  reducers: {\n    setPersonalInfo: (state, action) => {\n      state.data = action.payload;\n\n      if (state.masterData.languages.length > 0) {\n        state.data.spokenLanguagesList = state.masterData.languages.filter(language => state.data.spokenLanguagesList.find(lang => {\n          if (lang.id) {\n            return lang.id === language.id;\n          } else {\n            return lang === language.id;\n          }\n        }));\n      }\n\n      if (state.masterData.relationships.length > 0) {\n        if (typeof state.data.emergencyContact.relationship !== 'object') {\n          state.data.emergencyContact.relationship = state.masterData.relationships.filter(relation => relation.name === state.data.emergencyContact.relationship);\n        }\n      }\n\n      if (!state.data.references || state.data.references.length === 0) {\n        state.data.references = [{\n          firstName: '',\n          lastName: '',\n          phoneNumber: ''\n        }];\n      }\n\n      state.personalInfoError = false;\n    },\n    setCityState: (state, action) => {\n      state.data.city = action.payload.city;\n      state.data.stateName = action.payload.state;\n    },\n    setMasterData: (state, action) => {\n      if (action.payload.languages) {\n        state.masterData.languages = action.payload.languages;\n        state.masterData.relationships = action.payload.relationships;\n      }\n    },\n    addSpokenLanguagesList: (state, action) => {\n      const newLanguage = state.data.spokenLanguagesList ? [...state.data.spokenLanguagesList, action.payload] : [action.payload];\n      state.data.spokenLanguagesList = newLanguage;\n    },\n    removeSpokenLanguagesList: (state, action) => {\n      const newLanguage = state.data.spokenLanguagesList.filter(item => item.id !== action.payload.id);\n      state.data.spokenLanguagesList = [...newLanguage];\n    }\n  }\n});\nexport const {\n  setPersonalInfo,\n  setCityState,\n  setMasterData,\n  addSpokenLanguagesList,\n  removeSpokenLanguagesList\n} = personalInfoSlice.actions;\nexport default personalInfoSlice.reducer;","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/components/ProfileBuilder/PersonalInfo/slice.js"],"names":["createSlice","initialData","firstName","lastName","email","zipcode","streetAddress","city","stateName","cellPhoneNumber","homePhoneNumber","alternatePhoneNumber","emergencyContact","phoneNumber","relationship","references","spokenLanguagesList","jobDomainId","jobTypeId","initialState","data","masterData","languages","relationships","summaryData","personalInfoSlice","name","reducers","setPersonalInfo","state","action","payload","length","filter","language","find","lang","id","relation","personalInfoError","setCityState","setMasterData","addSpokenLanguagesList","newLanguage","removeSpokenLanguagesList","item","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialData = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    zipcode: '',\n    streetAddress: '',\n    city: '',\n    stateName: '',\n    cellPhoneNumber: '',\n    homePhoneNumber: '',\n    alternatePhoneNumber: '',\n    emergencyContact: {\n        firstName: '',\n        lastName: '',\n        phoneNumber: '',\n        relationship: []\n    },\n    references: [\n        {\n            firstName: '',\n            lastName: '',\n            phoneNumber: '',\n        }\n    ],\n    spokenLanguagesList: [],\n    jobDomainId: 1,\n    jobTypeId: 1\n}\nconst initialState = {\n    data: initialData,\n    masterData: {\n        languages: [],\n        relationships: [],\n    },\n    summaryData: initialData\n};\nexport const personalInfoSlice = createSlice({\n    name: 'personalInfo',\n    initialState,\n    reducers: {\n        setPersonalInfo: (state, action) => {\n            state.data = action.payload;\n            if (state.masterData.languages.length > 0) {\n                state.data.spokenLanguagesList = state.masterData.languages.filter(language => state.data.spokenLanguagesList.find(lang => {\n                    if (lang.id) {\n                        return lang.id === language.id\n                    } else {\n                        return lang === language.id\n                    }\n                }));\n            }\n            if (state.masterData.relationships.length > 0) {\n                if (typeof state.data.emergencyContact.relationship !== 'object') {\n                    state.data.emergencyContact.relationship = state.masterData.relationships.filter(relation =>\n                        relation.name === state.data.emergencyContact.relationship\n                    );\n                }\n            }\n\n            if (!state.data.references || state.data.references.length === 0) {\n                state.data.references = [{\n                    firstName: '',\n                    lastName: '',\n                    phoneNumber: '',\n                }]\n            }\n            state.personalInfoError = false;\n        },\n        setCityState: (state, action) => {\n            state.data.city = action.payload.city;\n            state.data.stateName = action.payload.state;\n        },\n        setMasterData: (state, action) => {\n            if (action.payload.languages) {\n                state.masterData.languages = action.payload.languages;\n                state.masterData.relationships = action.payload.relationships;\n            }\n        },\n        addSpokenLanguagesList: (state, action) => {\n            const newLanguage = state.data.spokenLanguagesList ? [...state.data.spokenLanguagesList, action.payload] : [action.payload];\n            state.data.spokenLanguagesList = newLanguage;\n        },\n        removeSpokenLanguagesList: (state, action) => {\n            const newLanguage = state.data.spokenLanguagesList.filter(item => item.id !== action.payload.id);\n            state.data.spokenLanguagesList = [...newLanguage];\n        },\n    }\n});\nexport const {\n    setPersonalInfo,\n    setCityState,\n    setMasterData,\n    addSpokenLanguagesList,\n    removeSpokenLanguagesList\n} = personalInfoSlice.actions;\nexport default personalInfoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}