{"ast":null,"code":"import { setPersonalInfo, setCityState, setMasterData, setMasterDataEmergency, addSpokenLanguagesList, removeSpokenLanguagesList, addEmergencyContactList, removeEmergencyContactList, setEmergencyRelationship } from './slice';\nimport { setError, resetError } from \"../slice\";\nimport { setLoading } from \"../../common/Loader/slice\";\nimport requestUtil from '../../../helpers/requestUtil';\nimport { nextTab } from \"../action\";\nimport { updateProfileFlag } from '../../Login/action';\nexport function updatePersonalInfo(data) {\n  return async dispatch => {\n    dispatch(setPersonalInfo(data));\n  };\n}\nexport function resetErrorStatus() {\n  return async dispatch => {\n    dispatch(resetError());\n  };\n}\nexport function getCurrentPersonalInfo(_ref) {\n  let {\n    url,\n    userId\n  } = _ref;\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const response = await requestUtil(`${url}/${userId}`, 'GET');\n      dispatch(setPersonalInfo(response));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function savePersonalInfo(_ref2) {\n  let {\n    url,\n    candidateId,\n    userId,\n    gotoNextTab = true\n  } = _ref2;\n  return async (dispatch, getState) => {\n    dispatch(setLoading(true));\n    const {\n      data\n    } = getState().personalInfo;\n\n    try {\n      await requestUtil(`${url}`, 'POST', {\n        appUserId: userId,\n        candidateId,\n        ...data,\n        spokenLanguagesList: data.spokenLanguagesList.map(item => item.id)\n      });\n\n      if (gotoNextTab) {\n        dispatch(nextTab());\n        dispatch(updateProfileFlag('isPersonalInfoTabCompleted'));\n      }\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function getCityState(url) {\n  return async dispatch => {\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setCityState(response));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n  };\n}\nexport function getSpokenLanguages(url) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setMasterData({\n        languages: response\n      }));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function updateLanguageList(lang, action) {\n  return dispatch => {\n    switch (action) {\n      case 'add':\n        dispatch(addSpokenLanguagesList(lang));\n        break;\n\n      case 'remove':\n        dispatch(removeSpokenLanguagesList(lang));\n        break;\n\n      default:\n        break;\n    }\n  };\n}\nexport function getEmergencyContactRelationShip(url) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setMasterDataEmergency({\n        emergencyContactRelationshipcyContact: response\n      }));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\n/*\nexport function updateEmergencyContactRelationshipList(value, action) {\n  return (dispatch) => {\n    switch (action) {\n      case 'add':\n        dispatch(addEmergencyContactList(value));\n        break;\n      case 'remove':\n        dispatch(removeEmergencyContactList(value));\n        break;\n      default:\n        break;\n    }\n  };\n  \n}\n\n*/\n\nexport function updateEmergencyContactRelationshipList(value) {\n  return dispatch => {\n    dispatch(setEmergencyRelationship(value));\n  };\n}","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/components/ProfileBuilder/PersonalInfo/action.js"],"names":["setPersonalInfo","setCityState","setMasterData","setMasterDataEmergency","addSpokenLanguagesList","removeSpokenLanguagesList","addEmergencyContactList","removeEmergencyContactList","setEmergencyRelationship","setError","resetError","setLoading","requestUtil","nextTab","updateProfileFlag","updatePersonalInfo","data","dispatch","resetErrorStatus","getCurrentPersonalInfo","url","userId","response","error","message","savePersonalInfo","candidateId","gotoNextTab","getState","personalInfo","appUserId","spokenLanguagesList","map","item","id","getCityState","getSpokenLanguages","languages","updateLanguageList","lang","action","getEmergencyContactRelationShip","emergencyContactRelationshipcyContact","updateEmergencyContactRelationshipList","value"],"mappings":"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","sourcesContent":["import { setPersonalInfo, setCityState, setMasterData, setMasterDataEmergency,\n  addSpokenLanguagesList, removeSpokenLanguagesList ,  addEmergencyContactList, removeEmergencyContactList , \n  setEmergencyRelationship\n  } from './slice';\nimport { setError, resetError } from \"../slice\";\nimport { setLoading } from \"../../common/Loader/slice\";\nimport requestUtil from '../../../helpers/requestUtil';\nimport { nextTab } from \"../action\";\nimport {updateProfileFlag} from '../../Login/action';\nexport function updatePersonalInfo(data) {\n  return async dispatch => {\n    dispatch(setPersonalInfo(data));\n  };\n}\n\nexport function resetErrorStatus() {\n  return async dispatch => {\n    dispatch(resetError());\n  };\n}\n\nexport function getCurrentPersonalInfo({url, userId}) {\n\n  return async dispatch => {\n    dispatch(setLoading(true));\n    try {      \n      \n      const response = await requestUtil(`${url}/${userId}`, 'GET');      \n      \n      dispatch(setPersonalInfo(response));\n     \n    } catch (error) {\n      dispatch(setError(error.message))\n    }\n    dispatch(setLoading(false));\n  };\n}\n\nexport function savePersonalInfo({url, candidateId, userId, gotoNextTab=true}) {\n  return async (dispatch, getState) => {\n    dispatch(setLoading(true));\n    const { data } = getState().personalInfo;\n    try {\n      await requestUtil(`${url}`, 'POST', {appUserId: userId, candidateId,\n        ...data, spokenLanguagesList: data.spokenLanguagesList.map(item => item.id)});\n      if(gotoNextTab) {\n        dispatch(nextTab());\n        dispatch(updateProfileFlag('isPersonalInfoTabCompleted'));\n      }\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n    dispatch(setLoading(false));\n  };\n}\n\nexport function getCityState(url) {\n  return async dispatch => {\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setCityState(response));\n    } catch (error) {\n      dispatch(setError(error.message))\n    }\n  };\n}\n\nexport function getSpokenLanguages(url) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setMasterData({languages: response} ));\n    } catch (error) {\n      dispatch(setError(error.message))\n    }\n    dispatch(setLoading(false));\n  };\n}\n\nexport function updateLanguageList(lang, action) {\n  return (dispatch) => {\n    switch (action) {\n      case 'add':\n        dispatch(addSpokenLanguagesList(lang));\n        break;\n      case 'remove':\n        dispatch(removeSpokenLanguagesList(lang));\n        break;\n      default:\n        break;\n    }\n  };\n  \n}\n\n\n\nexport function getEmergencyContactRelationShip(url) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setMasterDataEmergency({emergencyContactRelationshipcyContact: response} ));\n    } catch (error) {\n      dispatch(setError(error.message))\n    }\n    dispatch(setLoading(false));\n  };\n}\n\n/*\nexport function updateEmergencyContactRelationshipList(value, action) {\n  return (dispatch) => {\n    switch (action) {\n      case 'add':\n        dispatch(addEmergencyContactList(value));\n        break;\n      case 'remove':\n        dispatch(removeEmergencyContactList(value));\n        break;\n      default:\n        break;\n    }\n  };\n  \n}\n\n*/\n\nexport function updateEmergencyContactRelationshipList(value) {\n  return (dispatch) => {\n    dispatch(setEmergencyRelationship(value));\n  };\n}\n\n\n"]},"metadata":{},"sourceType":"module"}