{"ast":null,"code":"import { setPersonalInfo, setCityState, setMasterData, addSpokenLanguagesList, removeSpokenLanguagesList } from './slice';\nimport { setError, resetError } from \"../slice\";\nimport { setLoading } from \"../../common/Loader/slice\";\nimport requestUtil from '../../../helpers/requestUtil';\nimport { nextTab } from \"../action\";\nexport function updatePersonalInfo(data) {\n  return async dispatch => {\n    dispatch(setPersonalInfo(data));\n  };\n}\nexport function resetErrorStatus() {\n  return async dispatch => {\n    dispatch(resetError());\n  };\n}\nexport function getCurrentPersonalInfo(_ref) {\n  let {\n    url,\n    userId\n  } = _ref;\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const response = await requestUtil(`${url}/${userId}`, 'GET');\n      dispatch(setPersonalInfo(response));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function savePersonalInfo(_ref2) {\n  let {\n    url,\n    userId,\n    gotoNextTab = true\n  } = _ref2;\n  return async (dispatch, getState) => {\n    dispatch(setLoading(true));\n    const {\n      data\n    } = getState().personalInfo;\n\n    try {\n      await requestUtil(`${url}`, 'POST', {\n        appUserId: userId,\n        ...data,\n        spokenLanguagesList: data.spokenLanguagesList.map(item => item.id)\n      });\n\n      if (gotoNextTab) {\n        dispatch(nextTab());\n      }\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function getCityState(url) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setCityState(response));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function getSpokenLanguages(url) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setMasterData({\n        languages: response\n      }));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function updateLanguageList(lang, action) {\n  return dispatch => {\n    switch (action) {\n      case 'add':\n        dispatch(addSpokenLanguagesList(lang));\n        break;\n\n      case 'remove':\n        dispatch(removeSpokenLanguagesList(lang));\n        break;\n\n      default:\n        break;\n    }\n  };\n}","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/components/ProfileBuilder/PersonalInfo/action.js"],"names":["setPersonalInfo","setCityState","setMasterData","addSpokenLanguagesList","removeSpokenLanguagesList","setError","resetError","setLoading","requestUtil","nextTab","updatePersonalInfo","data","dispatch","resetErrorStatus","getCurrentPersonalInfo","url","userId","response","error","message","savePersonalInfo","gotoNextTab","getState","personalInfo","appUserId","spokenLanguagesList","map","item","id","getCityState","getSpokenLanguages","languages","updateLanguageList","lang","action"],"mappings":"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","sourcesContent":["import { setPersonalInfo, setCityState, setMasterData, addSpokenLanguagesList, removeSpokenLanguagesList } from './slice';\nimport { setError, resetError } from \"../slice\";\nimport { setLoading } from \"../../common/Loader/slice\";\nimport requestUtil from '../../../helpers/requestUtil';\nimport { nextTab } from \"../action\";\n\nexport function updatePersonalInfo(data) {\n  return async dispatch => {\n    dispatch(setPersonalInfo(data));\n  };\n}\n\nexport function resetErrorStatus() {\n  return async dispatch => {\n    dispatch(resetError());\n  };\n}\n\nexport function getCurrentPersonalInfo({url, userId}) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n    try {\n      const response = await requestUtil(`${url}/${userId}`, 'GET');\n      dispatch(setPersonalInfo(response));\n    } catch (error) {\n      dispatch(setError(error.message))\n    }\n    dispatch(setLoading(false));\n  };\n}\n\nexport function savePersonalInfo({url, userId, gotoNextTab=true}) {\n  return async (dispatch, getState) => {\n    dispatch(setLoading(true));\n    const { data } = getState().personalInfo;\n    try {\n      await requestUtil(`${url}`, 'POST', {appUserId: userId,\n        ...data, spokenLanguagesList: data.spokenLanguagesList.map(item => item.id)});\n      if(gotoNextTab) {\n        dispatch(nextTab());\n      }\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n    dispatch(setLoading(false));\n  };\n}\n\nexport function getCityState(url) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setCityState(response));\n    } catch (error) {\n      dispatch(setError(error.message))\n    }\n    dispatch(setLoading(false));\n  };\n}\n\nexport function getSpokenLanguages(url) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setMasterData({languages: response} ));\n    } catch (error) {\n      dispatch(setError(error.message))\n    }\n    dispatch(setLoading(false));\n  };\n}\n\nexport function updateLanguageList(lang, action) {\n  return (dispatch) => {\n    switch (action) {\n      case 'add':\n        dispatch(addSpokenLanguagesList(lang));\n        break;\n      case 'remove':\n        dispatch(removeSpokenLanguagesList(lang));\n        break;\n      default:\n        break;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}