{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  data: {\n    firstName: '',\n    lastName: '',\n    email: '',\n    zipcode: '',\n    streetAddress: '',\n    city: '',\n    stateName: '',\n    cellNumber: '',\n    homePhoneNumber: '',\n    alternatePhoneNumber: '',\n    emergencyContact: {\n      firstName: '',\n      lastName: '',\n      phoneNumber: '',\n      relationship: ''\n    },\n    references: [{\n      id: 1,\n      firstName: '',\n      lastName: '',\n      phoneNumber: ''\n    }],\n    spokenLanguagesList: [],\n    jobDomainId: 1,\n    jobTypeId: 1\n  },\n  masterData: {\n    languages: []\n  }\n};\nexport const personalInfoSlice = createSlice({\n  name: 'personalInfo',\n  initialState,\n  reducers: {\n    setPersonalInfo: (state, action) => {\n      state.data = action.payload;\n\n      if (state.masterData.languages.length > 0) {\n        state.data.spokenLanguagesList = state.masterData.languages.filter(language => state.data.spokenLanguagesList.includes(language.id));\n      }\n\n      state.personalInfoError = false;\n    },\n    setCityState: (state, action) => {\n      state.data.city = action.payload.city;\n      state.data.stateName = action.payload.state;\n    },\n    setMasterData: (state, action) => {\n      if (action.payload.languages) {\n        state.masterData.languages = action.payload.languages;\n\n        if (state.data.spokenLanguagesList.length > 0) {\n          state.data.spokenLanguagesList = state.data.spokenLanguagesList.map(lang => {\n            if (!lang.id) {\n              return action.payload.languages.find(l => l.id === lang);\n            } else {\n              return lang;\n            }\n          });\n        }\n      }\n    },\n    addSpokenLanguagesList: (state, action) => {\n      const newLanguage = state.data.spokenLanguagesList ? [...state.data.spokenLanguagesList, action.payload] : [action.payload];\n      state.data.spokenLanguagesList = newLanguage;\n    },\n    removeSpokenLanguagesList: (state, action) => {\n      const newLanguage = state.data.spokenLanguagesList.filter(item => item.id !== action.payload.id);\n      state.data.spokenLanguagesList = [...newLanguage];\n    }\n  }\n});\nexport const {\n  setPersonalInfo,\n  setCityState,\n  setMasterData,\n  addSpokenLanguagesList,\n  removeSpokenLanguagesList\n} = personalInfoSlice.actions;\nexport default personalInfoSlice.reducer;","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/components/ProfileBuilder/PersonalInfo/slice.js"],"names":["createSlice","initialState","data","firstName","lastName","email","zipcode","streetAddress","city","stateName","cellNumber","homePhoneNumber","alternatePhoneNumber","emergencyContact","phoneNumber","relationship","references","id","spokenLanguagesList","jobDomainId","jobTypeId","masterData","languages","personalInfoSlice","name","reducers","setPersonalInfo","state","action","payload","length","filter","language","includes","personalInfoError","setCityState","setMasterData","map","lang","find","l","addSpokenLanguagesList","newLanguage","removeSpokenLanguagesList","item","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\nconst initialState = {\n    data: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        zipcode: '',\n        streetAddress: '',\n        city: '',\n        stateName: '',\n        cellNumber: '',\n        homePhoneNumber: '',\n        alternatePhoneNumber: '',\n        emergencyContact: {\n            firstName: '',\n            lastName: '',\n            phoneNumber: '',\n            relationship: ''\n        },\n        references: [\n            {\n                id: 1,\n                firstName: '',\n                lastName: '',\n                phoneNumber: '',\n            }\n        ],\n        spokenLanguagesList: [],\n        jobDomainId: 1,\n        jobTypeId: 1\n    },\n    masterData:{\n        languages: []\n    },\n};\nexport const personalInfoSlice = createSlice({\n    name: 'personalInfo',\n    initialState,\n    reducers: {\n        setPersonalInfo: (state, action) => {\n            state.data = action.payload;\n            if(state.masterData.languages.length >0){\n                state.data.spokenLanguagesList = state.masterData.languages.filter(language => state.data.spokenLanguagesList.includes(language.id));\n            }\n            state.personalInfoError = false;\n        },\n        setCityState: (state, action) => {\n            state.data.city = action.payload.city;\n            state.data.stateName = action.payload.state;\n        },\n        setMasterData: (state, action) => {\n            if(action.payload.languages){\n                state.masterData.languages = action.payload.languages;\n                if(state.data.spokenLanguagesList.length > 0){\n                    state.data.spokenLanguagesList = state.data.spokenLanguagesList.map(lang => {\n                        if(!lang.id){\n                            return action.payload.languages.find(l => l.id === lang);\n                        } else {\n                            return lang;\n                        }\n                    })\n                }\n            }\n        },\n        addSpokenLanguagesList: (state, action) => {\n            const newLanguage = state.data.spokenLanguagesList ? [...state.data.spokenLanguagesList, action.payload] : [action.payload];\n            state.data.spokenLanguagesList = newLanguage;\n        },\n        removeSpokenLanguagesList: (state, action) => {\n            const newLanguage = state.data.spokenLanguagesList.filter(item => item.id !== action.payload.id);\n            state.data.spokenLanguagesList = [...newLanguage];\n        },\n    }\n});\nexport const { setPersonalInfo,setCityState, setMasterData, addSpokenLanguagesList, removeSpokenLanguagesList} = personalInfoSlice.actions;\nexport default personalInfoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}