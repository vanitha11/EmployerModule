{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  data: {\n    firstName: '',\n    lastName: '',\n    email: '',\n    zipcode: '',\n    streetAddress: '',\n    city: '',\n    stateName: '',\n    cellPhoneNumber: '',\n    homePhoneNumber: '',\n    alternatePhoneNumber: '',\n    emergencyContact: {\n      firstName: '',\n      lastName: '',\n      phoneNumber: '',\n      relationship: ''\n    },\n    references: [{\n      id: 1,\n      firstName: '',\n      lastName: '',\n      phoneNumber: ''\n    }],\n    spokenLanguagesList: [],\n    jobDomainId: 1,\n    jobTypeId: 1\n  },\n  masterData: {\n    languages: []\n  }\n};\nexport const personalInfoSlice = createSlice({\n  name: 'personalInfo',\n  initialState,\n  reducers: {\n    setPersonalInfo: (state, action) => {\n      state.data = action.payload;\n\n      if (state.masterData.languages.length > 0) {\n        state.data.spokenLanguagesList = state.masterData.languages.filter(language => state.data.spokenLanguagesList.find(lang => {\n          if (lang.id) {\n            return lang.id === language.id;\n          } else {\n            return lang === language.id;\n          }\n        }));\n      }\n\n      if (!state.data.references || state.data.references.length === 0) {\n        state.data.references = [{\n          id: 1,\n          firstName: '',\n          lastName: '',\n          phoneNumber: ''\n        }];\n      }\n\n      state.personalInfoError = false;\n    },\n    setCityState: (state, action) => {\n      state.data.city = action.payload.city;\n      state.data.stateName = action.payload.state;\n    },\n    setMasterData: (state, action) => {\n      if (action.payload.languages) {\n        state.masterData.languages = action.payload.languages;\n\n        if (state.data.spokenLanguagesList.length > 0) {\n          state.data.spokenLanguagesList = state.data.spokenLanguagesList.map(lang => {\n            if (!lang.id) {\n              return action.payload.languages.find(l => l.id === lang);\n            } else {\n              return lang;\n            }\n          });\n        }\n      }\n    },\n    addSpokenLanguagesList: (state, action) => {\n      const newLanguage = state.data.spokenLanguagesList ? [...state.data.spokenLanguagesList, action.payload] : [action.payload];\n      state.data.spokenLanguagesList = newLanguage;\n    },\n    removeSpokenLanguagesList: (state, action) => {\n      const newLanguage = state.data.spokenLanguagesList.filter(item => item.id !== action.payload.id);\n      state.data.spokenLanguagesList = [...newLanguage];\n    }\n  }\n});\nexport const {\n  setPersonalInfo,\n  setCityState,\n  setMasterData,\n  addSpokenLanguagesList,\n  removeSpokenLanguagesList\n} = personalInfoSlice.actions;\nexport default personalInfoSlice.reducer;","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/components/ProfileBuilder/PersonalInfo/slice.js"],"names":["createSlice","initialState","data","firstName","lastName","email","zipcode","streetAddress","city","stateName","cellPhoneNumber","homePhoneNumber","alternatePhoneNumber","emergencyContact","phoneNumber","relationship","references","id","spokenLanguagesList","jobDomainId","jobTypeId","masterData","languages","personalInfoSlice","name","reducers","setPersonalInfo","state","action","payload","length","filter","language","find","lang","personalInfoError","setCityState","setMasterData","map","l","addSpokenLanguagesList","newLanguage","removeSpokenLanguagesList","item","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\nconst initialState = {\n    data: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        zipcode: '',\n        streetAddress: '',\n        city: '',\n        stateName: '',\n        cellPhoneNumber: '',\n        homePhoneNumber: '',\n        alternatePhoneNumber: '',\n        emergencyContact: {\n            firstName: '',\n            lastName: '',\n            phoneNumber: '',\n            relationship: ''\n        },\n        references: [\n            {\n                id: 1,\n                firstName: '',\n                lastName: '',\n                phoneNumber: '',\n            }\n        ],\n        spokenLanguagesList: [],\n        jobDomainId: 1,\n        jobTypeId: 1\n    },\n    masterData:{\n        languages: []\n    },\n};\nexport const personalInfoSlice = createSlice({\n    name: 'personalInfo',\n    initialState,\n    reducers: {\n        setPersonalInfo: (state, action) => {\n            state.data = action.payload;\n            if(state.masterData.languages.length >0){\n                state.data.spokenLanguagesList = state.masterData.languages.filter(language => state.data.spokenLanguagesList.find(lang => {\n                    if(lang.id){\n                        return lang.id === language.id\n                    } else {\n                        return lang === language.id\n                    }\n                }));\n            }\n            if(!state.data.references || state.data.references.length === 0){\n                state.data.references = [{\n                    id: 1,\n                    firstName: '',\n                    lastName: '',\n                    phoneNumber: '',\n                }]\n            }\n            state.personalInfoError = false;\n        },\n        setCityState: (state, action) => {\n            state.data.city = action.payload.city;\n            state.data.stateName = action.payload.state;\n        },\n        setMasterData: (state, action) => {\n            if(action.payload.languages){\n                state.masterData.languages = action.payload.languages;\n                if(state.data.spokenLanguagesList.length > 0){\n                    state.data.spokenLanguagesList = state.data.spokenLanguagesList.map(lang => {\n                        if(!lang.id){\n                            return action.payload.languages.find(l => l.id === lang);\n                        } else {\n                            return lang;\n                        }\n                    })\n                }\n            }\n        },\n        addSpokenLanguagesList: (state, action) => {\n            const newLanguage = state.data.spokenLanguagesList ? [...state.data.spokenLanguagesList, action.payload] : [action.payload];\n            state.data.spokenLanguagesList = newLanguage;\n        },\n        removeSpokenLanguagesList: (state, action) => {\n            const newLanguage = state.data.spokenLanguagesList.filter(item => item.id !== action.payload.id);\n            state.data.spokenLanguagesList = [...newLanguage];\n        },\n    }\n});\nexport const { setPersonalInfo,setCityState, setMasterData, addSpokenLanguagesList, removeSpokenLanguagesList} = personalInfoSlice.actions;\nexport default personalInfoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}