{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\Overture\\\\DevOTWebUI\\\\src\\\\components\\\\common\\\\TextFieldPhoneNumber\\\\index.js\";\nimport React from \"react\";\nimport './textinput.css';\nimport PhoneInput from 'react-number-format'; //mport 'react-phone-number-input/style.css';\n//var NumberFormat = require('react-number-format');\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default (props => {\n  const divClass = props.divClass ? props.divClass : 'col-lg-6 col-md-12';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: divClass,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [!props.noLabel && /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: props.name,\n        children: props.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(PhoneInput, {\n        value: \"\",\n        prefix: \"\",\n        displayType: \"input\",\n        type: \"text\",\n        allowNegative: true,\n        format: \"###-###-####\",\n        onValueChange: event => props.updateValue(event.target)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 1\n      }, this), props.errors && props.errors.map(error => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invalid-input\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 61\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n});","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/components/common/TextFieldPhoneNumber/index.js"],"names":["React","PhoneInput","props","divClass","noLabel","name","label","event","updateValue","target","errors","map","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AACA,OAAOC,UAAP,MAAuB,qBAAvB,C,CACA;AACA;;;AACA,gBAAgBC,KAAD,IAAW;AACtB,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAN,GAAiBD,KAAK,CAACC,QAAvB,GAAkC,oBAAnD;AACA,sBACI;AAAK,IAAA,SAAS,EAAEA,QAAhB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,iBACM,CAACD,KAAK,CAACE,OAAP,iBAAkB;AAAO,QAAA,OAAO,EAAEF,KAAK,CAACG,IAAtB;AAAA,kBAA6BH,KAAK,CAACI;AAAnC;AAAA;AAAA;AAAA;AAAA,cADxB,eAQZ,QAAC,UAAD;AAEQ,QAAA,KAAK,EAAC,EAFd;AAGQ,QAAA,MAAM,EAAC,EAHf;AAIQ,QAAA,WAAW,EAAC,OAJpB;AAKQ,QAAA,IAAI,EAAC,MALb;AAMQ,QAAA,aAAa,EAAE,IANvB;AAOQ,QAAA,MAAM,EAAC,cAPf;AAO8B,QAAA,aAAa,EAAGC,KAAD,IAAWL,KAAK,CAACM,WAAN,CAAkBD,KAAK,CAACE,MAAxB;AAPxD;AAAA;AAAA;AAAA;AAAA,cARY,EAgBKP,KAAK,CAACQ,MAAN,IAAgBR,KAAK,CAACQ,MAAN,CAAaC,GAAb,CAAiBC,KAAK,iBAAK;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,kBAAgCA;AAAhC;AAAA;AAAA;AAAA;AAAA,cAA3B,CAhBrB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH,CAxBD","sourcesContent":["import React from \"react\";\nimport './textinput.css';\nimport PhoneInput from 'react-number-format'\n//mport 'react-phone-number-input/style.css';\n//var NumberFormat = require('react-number-format');\nexport default (props) => {\n    const divClass = props.divClass ? props.divClass : 'col-lg-6 col-md-12';\n    return(\n        <div className={divClass}>\n            <div className=\"form-group\">\n                { !props.noLabel && <label htmlFor={props.name}>{props.label}</label> }\n               {/*} <PhoneInput type=\"text\" className=\"form-control\" id={props.name} value={props.value}\n                       placeholder={props.placeholder} name={props.name}\n                       onChange={(event) => props.updateValue(event.target)}\n                        autoFocus={props.autoFocus} format=\"###-###-####\" \n                        />\n    */}\n<PhoneInput\n       \n        value=\"\"\n        prefix=\"\"\n        displayType=\"input\"\n        type=\"text\"\n        allowNegative={true}\n        format=\"###-###-####\" onValueChange={(event) => props.updateValue(event.target)} />\n                {props.errors && props.errors.map(error => (<div className=\"invalid-input\">{error}</div>))}\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}