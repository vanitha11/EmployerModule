{"ast":null,"code":"import _toConsumableArray from\"D:/projects/Overture/DevOTWebUI/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{createSlice}from\"@reduxjs/toolkit\";var initialState={data:{firstName:'',lastName:'',email:'',zipcode:'',streetAddress:'',city:'',stateName:'',cellPhoneNumber:'',homePhoneNumber:'',alternatePhoneNumber:'',emergencyContact:{firstName:'',lastName:'',phoneNumber:'',relationship:''},references:[{firstName:'',lastName:'',phoneNumber:''}],spokenLanguagesList:[],jobDomainId:1,jobTypeId:1// emergencyContactRelationshipList: [],\n},masterData:{languages:[],emergencyContactRelationship:[]}};export var personalInfoSlice=createSlice({name:'personalInfo',initialState:initialState,reducers:{setPersonalInfo:function setPersonalInfo(state,action){state.data=action.payload;if(state.masterData.languages.length>0){state.data.spokenLanguagesList=state.masterData.languages.filter(function(language){return state.data.spokenLanguagesList.find(function(lang){if(lang.id){return lang.id===language.id;}else{return lang===language.id;}});});}if(!state.data.references||state.data.references.length===0){state.data.references=[{firstName:'',lastName:'',phoneNumber:''}];}if(!state.data.emergencyContact){state.data.emergencyContact.relationship=state.data.emergencyContact.relationship;}/*\n            if(state.masterData.emergencyContactRelationship.length >0){\n                state.data.emergencyContactRelationshipList = state.masterData.emergencyContactRelationship.filter(language => state.data.emergencyContactRelationshipList.find(lang => {\n                    if(lang.id){\n                        return lang.id === language.id\n                    } else {\n                        return lang === language.id\n                    }\n                }));\n            }\n*/state.personalInfoError=false;},setCityState:function setCityState(state,action){state.data.city=action.payload.city;state.data.stateName=action.payload.state;},setMasterData:function setMasterData(state,action){if(action.payload.languages){state.masterData.languages=action.payload.languages;if(state.data.spokenLanguagesList.length>0){state.data.spokenLanguagesList=state.data.spokenLanguagesList.map(function(lang){if(!lang.id){return action.payload.languages.find(function(l){return l.id===lang;});}else{return lang;}});}}},addSpokenLanguagesList:function addSpokenLanguagesList(state,action){var newLanguage=state.data.spokenLanguagesList?[].concat(_toConsumableArray(state.data.spokenLanguagesList),[action.payload]):[action.payload];state.data.spokenLanguagesList=newLanguage;},removeSpokenLanguagesList:function removeSpokenLanguagesList(state,action){var newLanguage=state.data.spokenLanguagesList.filter(function(item){return item.id!==action.payload.id;});state.data.spokenLanguagesList=_toConsumableArray(newLanguage);},setMasterDataEmergency:function setMasterDataEmergency(state,action){if(action.payload.emergencyContactRelationshipcyContact){state.masterData.emergencyContactRelationship=action.payload.emergencyContactRelationshipcyContact;state.masterData.emergencyContactRelationshipList=state.masterData.emergencyContactRelationship;/*if(state.data.emergencyContactRelationshipList.length > 0){\n                    state.data.emergencyContactRelationshipList = state.data.emergencyContactRelationshipList.map(lang => {\n                        if(!lang.id){\n                            return action.payload.emergencyContactRelationship.find(l => l.id === lang);\n                        } else {\n                            return lang;\n                        }\n                    })\n                }*/}},addEmergencyContactList:function addEmergencyContactList(state,action){var newEmergencyContacte=state.data.emergencyContactRelationshipListcyContactList?[].concat(_toConsumableArray(state.data.emergencyContactRelationshipListcyContactList),[action.payload]):[action.payload];state.data.emergencyContact.relationship=newEmergencyContacte;},removeEmergencyContactList:function removeEmergencyContactList(state,action){var newEmergencyContacte=state.data.emergencyContactRelationshipListcyContactList.filter(function(item){return item.id!==action.payload.id;});state.data.emergencyContact.relationship=_toConsumableArray(newEmergencyContacte);},setEmergencyRelationship:function setEmergencyRelationship(state,action){state.data.emergencyContact.relationship=action.payload.name;}}});var _personalInfoSlice$ac=personalInfoSlice.actions,setPersonalInfo=_personalInfoSlice$ac.setPersonalInfo,setCityState=_personalInfoSlice$ac.setCityState,setMasterData=_personalInfoSlice$ac.setMasterData,setEmergencyRelationship=_personalInfoSlice$ac.setEmergencyRelationship,addSpokenLanguagesList=_personalInfoSlice$ac.addSpokenLanguagesList,removeSpokenLanguagesList=_personalInfoSlice$ac.removeSpokenLanguagesList,setMasterDataEmergency=_personalInfoSlice$ac.setMasterDataEmergency,addEmergencyContactList=_personalInfoSlice$ac.addEmergencyContactList,removeEmergencyContactList=_personalInfoSlice$ac.removeEmergencyContactList;export{setPersonalInfo,setCityState,setMasterData,setEmergencyRelationship,addSpokenLanguagesList,removeSpokenLanguagesList,setMasterDataEmergency,addEmergencyContactList,removeEmergencyContactList};export default personalInfoSlice.reducer;","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/components/ProfileBuilder/PersonalInfo/slice.js"],"names":["createSlice","initialState","data","firstName","lastName","email","zipcode","streetAddress","city","stateName","cellPhoneNumber","homePhoneNumber","alternatePhoneNumber","emergencyContact","phoneNumber","relationship","references","spokenLanguagesList","jobDomainId","jobTypeId","masterData","languages","emergencyContactRelationship","personalInfoSlice","name","reducers","setPersonalInfo","state","action","payload","length","filter","language","find","lang","id","personalInfoError","setCityState","setMasterData","map","l","addSpokenLanguagesList","newLanguage","removeSpokenLanguagesList","item","setMasterDataEmergency","emergencyContactRelationshipcyContact","emergencyContactRelationshipList","addEmergencyContactList","newEmergencyContacte","emergencyContactRelationshipListcyContactList","removeEmergencyContactList","setEmergencyRelationship","actions","reducer"],"mappings":"6HAAA,OAAQA,WAAR,KAA0B,kBAA1B,CACA,GAAMC,CAAAA,YAAY,CAAG,CAEjBC,IAAI,CAAE,CACFC,SAAS,CAAE,EADT,CAEFC,QAAQ,CAAE,EAFR,CAGFC,KAAK,CAAE,EAHL,CAIFC,OAAO,CAAE,EAJP,CAKFC,aAAa,CAAE,EALb,CAMFC,IAAI,CAAE,EANJ,CAOFC,SAAS,CAAE,EAPT,CAQFC,eAAe,CAAE,EARf,CASFC,eAAe,CAAE,EATf,CAUFC,oBAAoB,CAAE,EAVpB,CAWFC,gBAAgB,CAAE,CACdV,SAAS,CAAE,EADG,CAEdC,QAAQ,CAAE,EAFI,CAGdU,WAAW,CAAE,EAHC,CAIdC,YAAY,CAAE,EAJA,CAXhB,CAiBFC,UAAU,CAAE,CACR,CACIb,SAAS,CAAE,EADf,CAEIC,QAAQ,CAAE,EAFd,CAGIU,WAAW,CAAE,EAHjB,CADQ,CAjBV,CAwBFG,mBAAmB,CAAE,EAxBnB,CAyBFC,WAAW,CAAE,CAzBX,CA0BFC,SAAS,CAAE,CAEZ;AA5BG,CAFW,CAgCjBC,UAAU,CAAC,CACPC,SAAS,CAAE,EADJ,CAEPC,4BAA4B,CAAE,EAFvB,CAhCM,CAArB,CAqCA,MAAO,IAAMC,CAAAA,iBAAiB,CAAGvB,WAAW,CAAC,CACzCwB,IAAI,CAAE,cADmC,CAEzCvB,YAAY,CAAZA,YAFyC,CAGzCwB,QAAQ,CAAE,CACNC,eAAe,CAAE,yBAACC,KAAD,CAAQC,MAAR,CAAmB,CAChCD,KAAK,CAACzB,IAAN,CAAa0B,MAAM,CAACC,OAApB,CAEA,GAAGF,KAAK,CAACP,UAAN,CAAiBC,SAAjB,CAA2BS,MAA3B,CAAmC,CAAtC,CAAwC,CACpCH,KAAK,CAACzB,IAAN,CAAWe,mBAAX,CAAiCU,KAAK,CAACP,UAAN,CAAiBC,SAAjB,CAA2BU,MAA3B,CAAkC,SAAAC,QAAQ,QAAIL,CAAAA,KAAK,CAACzB,IAAN,CAAWe,mBAAX,CAA+BgB,IAA/B,CAAoC,SAAAC,IAAI,CAAI,CACvH,GAAGA,IAAI,CAACC,EAAR,CAAW,CACP,MAAOD,CAAAA,IAAI,CAACC,EAAL,GAAYH,QAAQ,CAACG,EAA5B,CACH,CAFD,IAEO,CACH,MAAOD,CAAAA,IAAI,GAAKF,QAAQ,CAACG,EAAzB,CACH,CACJ,CAN8E,CAAJ,EAA1C,CAAjC,CAOH,CACD,GAAG,CAACR,KAAK,CAACzB,IAAN,CAAWc,UAAZ,EAA0BW,KAAK,CAACzB,IAAN,CAAWc,UAAX,CAAsBc,MAAtB,GAAiC,CAA9D,CAAgE,CAC5DH,KAAK,CAACzB,IAAN,CAAWc,UAAX,CAAwB,CAAC,CACrBb,SAAS,CAAE,EADU,CAErBC,QAAQ,CAAE,EAFW,CAGrBU,WAAW,CAAE,EAHQ,CAAD,CAAxB,CAKH,CAED,GAAG,CAACa,KAAK,CAACzB,IAAN,CAAWW,gBAAf,CAAgC,CAC5Bc,KAAK,CAACzB,IAAN,CAAWW,gBAAX,CAA4BE,YAA5B,CAA2CY,KAAK,CAACzB,IAAN,CAAWW,gBAAX,CAA4BE,YAAvE,CACH,CACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACYY,KAAK,CAACS,iBAAN,CAA0B,KAA1B,CAGH,CAtCK,CAuCNC,YAAY,CAAE,sBAACV,KAAD,CAAQC,MAAR,CAAmB,CAC7BD,KAAK,CAACzB,IAAN,CAAWM,IAAX,CAAkBoB,MAAM,CAACC,OAAP,CAAerB,IAAjC,CACAmB,KAAK,CAACzB,IAAN,CAAWO,SAAX,CAAuBmB,MAAM,CAACC,OAAP,CAAeF,KAAtC,CACH,CA1CK,CA2CNW,aAAa,CAAE,uBAACX,KAAD,CAAQC,MAAR,CAAmB,CAC9B,GAAGA,MAAM,CAACC,OAAP,CAAeR,SAAlB,CAA4B,CACxBM,KAAK,CAACP,UAAN,CAAiBC,SAAjB,CAA6BO,MAAM,CAACC,OAAP,CAAeR,SAA5C,CACA,GAAGM,KAAK,CAACzB,IAAN,CAAWe,mBAAX,CAA+Ba,MAA/B,CAAwC,CAA3C,CAA6C,CACzCH,KAAK,CAACzB,IAAN,CAAWe,mBAAX,CAAiCU,KAAK,CAACzB,IAAN,CAAWe,mBAAX,CAA+BsB,GAA/B,CAAmC,SAAAL,IAAI,CAAI,CACxE,GAAG,CAACA,IAAI,CAACC,EAAT,CAAY,CACR,MAAOP,CAAAA,MAAM,CAACC,OAAP,CAAeR,SAAf,CAAyBY,IAAzB,CAA8B,SAAAO,CAAC,QAAIA,CAAAA,CAAC,CAACL,EAAF,GAASD,IAAb,EAA/B,CAAP,CACH,CAFD,IAEO,CACH,MAAOA,CAAAA,IAAP,CACH,CACJ,CANgC,CAAjC,CAOH,CACJ,CAEJ,CAzDK,CA0DNO,sBAAsB,CAAE,gCAACd,KAAD,CAAQC,MAAR,CAAmB,CACvC,GAAMc,CAAAA,WAAW,CAAGf,KAAK,CAACzB,IAAN,CAAWe,mBAAX,8BAAqCU,KAAK,CAACzB,IAAN,CAAWe,mBAAhD,GAAqEW,MAAM,CAACC,OAA5E,GAAuF,CAACD,MAAM,CAACC,OAAR,CAA3G,CACAF,KAAK,CAACzB,IAAN,CAAWe,mBAAX,CAAiCyB,WAAjC,CACH,CA7DK,CA8DNC,yBAAyB,CAAE,mCAAChB,KAAD,CAAQC,MAAR,CAAmB,CAC1C,GAAMc,CAAAA,WAAW,CAAGf,KAAK,CAACzB,IAAN,CAAWe,mBAAX,CAA+Bc,MAA/B,CAAsC,SAAAa,IAAI,QAAIA,CAAAA,IAAI,CAACT,EAAL,GAAYP,MAAM,CAACC,OAAP,CAAeM,EAA/B,EAA1C,CAApB,CACAR,KAAK,CAACzB,IAAN,CAAWe,mBAAX,oBAAqCyB,WAArC,EACH,CAjEK,CAmENG,sBAAsB,CAAE,gCAAClB,KAAD,CAAQC,MAAR,CAAmB,CACvC,GAAGA,MAAM,CAACC,OAAP,CAAeiB,qCAAlB,CAAwD,CACpDnB,KAAK,CAACP,UAAN,CAAiBE,4BAAjB,CAAgDM,MAAM,CAACC,OAAP,CAAeiB,qCAA/D,CACAnB,KAAK,CAACP,UAAN,CAAiB2B,gCAAjB,CAAkDpB,KAAK,CAACP,UAAN,CAAiBE,4BAAnE,CACA;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBACa,CACJ,CAjFK,CAoFN0B,uBAAuB,CAAE,iCAACrB,KAAD,CAAQC,MAAR,CAAmB,CACxC,GAAMqB,CAAAA,oBAAoB,CAAGtB,KAAK,CAACzB,IAAN,CAAWgD,6CAAX,8BAA+DvB,KAAK,CAACzB,IAAN,CAAWgD,6CAA1E,GAAyHtB,MAAM,CAACC,OAAhI,GAA2I,CAACD,MAAM,CAACC,OAAR,CAAxK,CACAF,KAAK,CAACzB,IAAN,CAAWW,gBAAX,CAA4BE,YAA5B,CAA2CkC,oBAA3C,CACH,CAvFK,CAwFNE,0BAA0B,CAAE,oCAACxB,KAAD,CAAQC,MAAR,CAAmB,CAC3C,GAAMqB,CAAAA,oBAAoB,CAAGtB,KAAK,CAACzB,IAAN,CAAWgD,6CAAX,CAAyDnB,MAAzD,CAAgE,SAAAa,IAAI,QAAIA,CAAAA,IAAI,CAACT,EAAL,GAAYP,MAAM,CAACC,OAAP,CAAeM,EAA/B,EAApE,CAA7B,CACAR,KAAK,CAACzB,IAAN,CAAWW,gBAAX,CAA4BE,YAA5B,oBAA+CkC,oBAA/C,EACH,CA3FK,CA6FNG,wBAAwB,CAAE,kCAACzB,KAAD,CAAQC,MAAR,CAAmB,CACzCD,KAAK,CAACzB,IAAN,CAAWW,gBAAX,CAA4BE,YAA5B,CAA2Ca,MAAM,CAACC,OAAP,CAAeL,IAA1D,CACH,CA/FK,CAH+B,CAAD,CAArC,CAsGA,0BAA6MD,iBAAiB,CAAC8B,OAA/N,CAAQ3B,eAAR,uBAAQA,eAAR,CAAwBW,YAAxB,uBAAwBA,YAAxB,CAAsCC,aAAtC,uBAAsCA,aAAtC,CAAqDc,wBAArD,uBAAqDA,wBAArD,CAA8EX,sBAA9E,uBAA8EA,sBAA9E,CAAsGE,yBAAtG,uBAAsGA,yBAAtG,CAAgIE,sBAAhI,uBAAgIA,sBAAhI,CAAuJG,uBAAvJ,uBAAuJA,uBAAvJ,CAA+KG,0BAA/K,uBAA+KA,0BAA/K,C,uMACP,cAAe5B,CAAAA,iBAAiB,CAAC+B,OAAjC","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\nconst initialState = {\n    \n    data: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        zipcode: '',\n        streetAddress: '',\n        city: '',\n        stateName: '',\n        cellPhoneNumber: '',\n        homePhoneNumber: '',\n        alternatePhoneNumber: '',\n        emergencyContact: {\n            firstName: '',\n            lastName: '',\n            phoneNumber: '',\n            relationship: ''\n        },\n        references: [\n            {\n                firstName: '',\n                lastName: '',\n                phoneNumber: '',\n            }\n        ],\n        spokenLanguagesList: [],\n        jobDomainId: 1,\n        jobTypeId: 1,\n\n       // emergencyContactRelationshipList: [],\n    },\n    masterData:{\n        languages: [],\n        emergencyContactRelationship: [],\n    },\n};\nexport const personalInfoSlice = createSlice({\n    name: 'personalInfo',\n    initialState,\n    reducers: {\n        setPersonalInfo: (state, action) => {\n            state.data = action.payload;\n            \n            if(state.masterData.languages.length >0){\n                state.data.spokenLanguagesList = state.masterData.languages.filter(language => state.data.spokenLanguagesList.find(lang => {\n                    if(lang.id){\n                        return lang.id === language.id\n                    } else {\n                        return lang === language.id\n                    }\n                }));\n            }\n            if(!state.data.references || state.data.references.length === 0){\n                state.data.references = [{\n                    firstName: '',\n                    lastName: '',\n                    phoneNumber: '',\n                }]\n            }\n\n            if(!state.data.emergencyContact){\n                state.data.emergencyContact.relationship = state.data.emergencyContact.relationship;\n            }\n/*\n            if(state.masterData.emergencyContactRelationship.length >0){\n                state.data.emergencyContactRelationshipList = state.masterData.emergencyContactRelationship.filter(language => state.data.emergencyContactRelationshipList.find(lang => {\n                    if(lang.id){\n                        return lang.id === language.id\n                    } else {\n                        return lang === language.id\n                    }\n                }));\n            }\n*/\n            state.personalInfoError = false;\n            \n            \n        },\n        setCityState: (state, action) => {\n            state.data.city = action.payload.city;\n            state.data.stateName = action.payload.state;\n        },\n        setMasterData: (state, action) => {           \n            if(action.payload.languages){\n                state.masterData.languages = action.payload.languages;\n                if(state.data.spokenLanguagesList.length > 0){\n                    state.data.spokenLanguagesList = state.data.spokenLanguagesList.map(lang => {\n                        if(!lang.id){\n                            return action.payload.languages.find(l => l.id === lang);\n                        } else {\n                            return lang;\n                        }\n                    })\n                }\n            }\n\n        },\n        addSpokenLanguagesList: (state, action) => {\n            const newLanguage = state.data.spokenLanguagesList ? [...state.data.spokenLanguagesList, action.payload] : [action.payload];\n            state.data.spokenLanguagesList = newLanguage;\n        },\n        removeSpokenLanguagesList: (state, action) => {\n            const newLanguage = state.data.spokenLanguagesList.filter(item => item.id !== action.payload.id);\n            state.data.spokenLanguagesList = [...newLanguage];\n        },\n\n        setMasterDataEmergency: (state, action) => { \n            if(action.payload.emergencyContactRelationshipcyContact){\n                state.masterData.emergencyContactRelationship = action.payload.emergencyContactRelationshipcyContact;\n                state.masterData.emergencyContactRelationshipList=state.masterData.emergencyContactRelationship;\n                /*if(state.data.emergencyContactRelationshipList.length > 0){\n                    state.data.emergencyContactRelationshipList = state.data.emergencyContactRelationshipList.map(lang => {\n                        if(!lang.id){\n                            return action.payload.emergencyContactRelationship.find(l => l.id === lang);\n                        } else {\n                            return lang;\n                        }\n                    })\n                }*/\n            }\n        },\n\n        \n        addEmergencyContactList: (state, action) => {\n            const newEmergencyContacte = state.data.emergencyContactRelationshipListcyContactList ? [...state.data.emergencyContactRelationshipListcyContactList, action.payload] : [action.payload];\n            state.data.emergencyContact.relationship = newEmergencyContacte;\n        },\n        removeEmergencyContactList: (state, action) => {\n            const newEmergencyContacte = state.data.emergencyContactRelationshipListcyContactList.filter(item => item.id !== action.payload.id);\n            state.data.emergencyContact.relationship = [...newEmergencyContacte];\n        },\n        \n        setEmergencyRelationship: (state, action) => {\n            state.data.emergencyContact.relationship = action.payload.name;\n        },\n        \n    }\n});\nexport const { setPersonalInfo,setCityState, setMasterData, setEmergencyRelationship,addSpokenLanguagesList, removeSpokenLanguagesList,setMasterDataEmergency,addEmergencyContactList,removeEmergencyContactList} = personalInfoSlice.actions;\nexport default personalInfoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}