{"ast":null,"code":"import _objectSpread from\"D:/projects/Overture/DevOTWebUI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"D:/projects/Overture/DevOTWebUI/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"D:\\\\projects\\\\Overture\\\\DevOTWebUI\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";export default/*#__PURE__*/(function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(url,method,body,headers,fileBody){var requestHeaders,request,response,data,contentType,message,_data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:requestHeaders=_objectSpread({'Content-Type':fileBody?'':'application/json','Accept':fileBody?'*/*':'application/json'},headers);request=fileBody?{method:method,body:body}:{method:method,headers:requestHeaders,body:JSON.stringify(body)};_context.next=4;return fetch(url,request);case 4:response=_context.sent;if(!response.ok){_context.next=14;break;}_context.next=8;return response.json();case 8:data=_context.sent;if(!(data.statusCode&&data.statusCode!==200)){_context.next=11;break;}throw new Error(data.message);case 11:return _context.abrupt(\"return\",data.data);case 14:contentType=response.headers.get(\"content-type\");message='';if(!(contentType&&contentType.indexOf(\"application/json\")!==-1)){_context.next=23;break;}_context.next=19;return response.json();case 19:_data=_context.sent;message=_data.message?_data.message:_data;_context.next=26;break;case 23:_context.next=25;return response.text();case 25:message=_context.sent;case 26:throw new Error(message);case 27:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2,_x3,_x4,_x5){return _ref.apply(this,arguments);};})();","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/helpers/requestUtil.js"],"names":["url","method","body","headers","fileBody","requestHeaders","request","JSON","stringify","fetch","response","ok","json","data","statusCode","Error","message","contentType","get","indexOf","text"],"mappings":"yWAAA,wGAAe,iBAAOA,GAAP,CAAYC,MAAZ,CAAoBC,IAApB,CAA0BC,OAA1B,CAAmCC,QAAnC,qLACLC,cADK,gBAEP,eAAgBD,QAAQ,CAAG,EAAH,CAAQ,kBAFzB,CAGP,SAAUA,QAAQ,CAAG,KAAH,CAAW,kBAHtB,EAIJD,OAJI,EAMLG,OANK,CAMKF,QAAQ,CAAG,CACvBH,MAAM,CAANA,MADuB,CAEvBC,IAAI,CAAJA,IAFuB,CAAH,CAGpB,CACAD,MAAM,CAANA,MADA,CAEAE,OAAO,CAAEE,cAFT,CAGAH,IAAI,CAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf,CAHN,CATO,uBAcYO,CAAAA,KAAK,CAACT,GAAD,CAAMM,OAAN,CAdjB,QAcLI,QAdK,mBAePA,QAAQ,CAACC,EAfF,gDAgBYD,CAAAA,QAAQ,CAACE,IAAT,EAhBZ,QAgBDC,IAhBC,oBAiBHA,IAAI,CAACC,UAAL,EAAmBD,IAAI,CAACC,UAAL,GAAoB,GAjBpC,gCAkBG,IAAIC,CAAAA,KAAJ,CAAUF,IAAI,CAACG,OAAf,CAlBH,yCAoBAH,IAAI,CAACA,IApBL,UAsBDI,WAtBC,CAsBaP,QAAQ,CAACP,OAAT,CAAiBe,GAAjB,CAAqB,cAArB,CAtBb,CAuBHF,OAvBG,CAuBO,EAvBP,MAwBHC,WAAW,EAAIA,WAAW,CAACE,OAAZ,CAAoB,kBAApB,IAA4C,CAAC,CAxBzD,kDAyBgBT,CAAAA,QAAQ,CAACE,IAAT,EAzBhB,SAyBGC,KAzBH,eA0BHG,OAAO,CAAGH,KAAI,CAACG,OAAL,CAAeH,KAAI,CAACG,OAApB,CAA8BH,KAAxC,CA1BG,sDA4BaH,CAAAA,QAAQ,CAACU,IAAT,EA5Bb,SA4BHJ,OA5BG,4BA8BD,IAAID,CAAAA,KAAJ,CAAUC,OAAV,CA9BC,wDAAf","sourcesContent":["export default async (url, method, body, headers, fileBody) => {\n    const requestHeaders = {\n        'Content-Type': fileBody ? '' : 'application/json',\n        'Accept': fileBody ? '*/*' : 'application/json',\n        ...headers\n    };\n    const request = fileBody ? {\n        method,\n        body\n    } : {\n        method,\n        headers: requestHeaders,\n        body: JSON.stringify(body)\n    };\n    const response = await fetch(url, request);\n    if (response.ok) {\n        const data = await response.json();\n        if (data.statusCode && data.statusCode !== 200) {\n            throw new Error(data.message);\n        }\n        return data.data;\n    } else {\n        const contentType = response.headers.get(\"content-type\");\n        let message = '';\n        if (contentType && contentType.indexOf(\"application/json\") !== -1) {\n            const data = await response.json();\n            message = data.message ? data.message : data;\n        } else {\n            message = await response.text();\n        }\n        throw new Error(message);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}