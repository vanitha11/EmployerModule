{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\Overture\\\\DevOTWebUI_LocalDevelopment\\\\src\\\\components\\\\common\\\\TextField\\\\index.js\";\nimport React from \"react\";\nimport formatters from \"./formatters\";\nimport './input.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default (props => {\n  const formatValue = target => {\n    if (props.format) {\n      target.value = formatters(target.value, props.format);\n    }\n\n    return target;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [props.label && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrap-input100 validate-input input-group\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: props.name,\n        className: \"logintextspace\",\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: props.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 76\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrap-input100 validate-input input-group is-invalid\",\n      \"data-bs-validate\": \"Valid email is required: ex@abc.xyz\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: `input-group-text bg-white text-muted`,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: props.iconClass,\n          \"aria-hidden\": \"true\",\n          onClick: props.clickeye\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: `input100 border-start-0 form-control ms-0 ${props.errors && props.errors.length > 0 && 'has-errors'}`,\n        type: props.type,\n        placeholder: props.placeholder,\n        required: props.required,\n        autoFocus: props.autoFocus,\n        onChange: event => props.updateValue(formatValue(event.target)),\n        name: props.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), props.errors && props.errors.map(error => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"invalid-input\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 57\n    }, this))]\n  }, void 0, true);\n});","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI_LocalDevelopment/src/components/common/TextField/index.js"],"names":["React","formatters","props","formatValue","target","format","value","label","name","iconClass","clickeye","errors","length","type","placeholder","required","autoFocus","event","updateValue","map","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,aAAP;;;AAEA,gBAAgBC,KAAD,IAAW;AACtB,QAAMC,WAAW,GAAIC,MAAD,IAAY;AAC5B,QAAIF,KAAK,CAACG,MAAV,EAAkB;AACdD,MAAAA,MAAM,CAACE,KAAP,GAAeL,UAAU,CAACG,MAAM,CAACE,KAAR,EAAeJ,KAAK,CAACG,MAArB,CAAzB;AACH;;AACD,WAAOD,MAAP;AACH,GALD;;AAMA,sBACI;AAAA,eAEQF,KAAK,CAACK,KAAN,iBAAe;AAAK,MAAA,SAAS,EAAC,0CAAf;AAAA,6BACX;AAAO,QAAA,OAAO,EAAEL,KAAK,CAACM,IAAtB;AAA4B,QAAA,SAAS,EAAC,gBAAtC;AAAA,+BAAuD;AAAA,oBAAKN,KAAK,CAACK;AAAX;AAAA;AAAA;AAAA;AAAA;AAAvD;AAAA;AAAA;AAAA;AAAA;AADW;AAAA;AAAA;AAAA;AAAA,YAFvB,eAMI;AAAK,MAAA,SAAS,EAAC,qDAAf;AACK,0BAAiB,qCADtB;AAAA,8BAEI;AAAG,QAAA,SAAS,EAAG,sCAAf;AAAA,+BACI;AAAG,UAAA,SAAS,EAAEL,KAAK,CAACO,SAApB;AAA+B,yBAAY,MAA3C;AAAkD,UAAA,OAAO,EAAEP,KAAK,CAACQ;AAAjE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,eAKI;AACI,QAAA,SAAS,EAAG,6CAA6CR,KAAK,CAACS,MAAN,IAAgBT,KAAK,CAACS,MAAN,CAAaC,MAAb,GAAsB,CAAvC,IAA6C,YAAa,EADtH;AAEI,QAAA,IAAI,EAAEV,KAAK,CAACW,IAFhB;AAEsB,QAAA,WAAW,EAAEX,KAAK,CAACY,WAFzC;AAEsD,QAAA,QAAQ,EAAEZ,KAAK,CAACa,QAFtE;AAGI,QAAA,SAAS,EAAEb,KAAK,CAACc,SAHrB;AAII,QAAA,QAAQ,EAAGC,KAAD,IAAWf,KAAK,CAACgB,WAAN,CAAkBf,WAAW,CAACc,KAAK,CAACb,MAAP,CAA7B,CAJzB;AAIuE,QAAA,IAAI,EAAEF,KAAK,CAACM;AAJnF;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,EAiBKN,KAAK,CAACS,MAAN,IAAgBT,KAAK,CAACS,MAAN,CAAaQ,GAAb,CAAiBC,KAAK,iBAAK;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,gBAAgCA;AAAhC;AAAA;AAAA;AAAA;AAAA,YAA3B,CAjBrB;AAAA,kBADJ;AAqBH,CA5BD","sourcesContent":["import React from \"react\";\nimport formatters from \"./formatters\";\nimport './input.css';\n\nexport default (props) => {\n    const formatValue = (target) => {\n        if (props.format) {\n            target.value = formatters(target.value, props.format);\n        }\n        return target;\n    };\n    return (\n        <>\n            {\n                props.label && <div className=\"wrap-input100 validate-input input-group\">\n                    <label htmlFor={props.name} className=\"logintextspace\"><h5>{props.label}</h5></label>\n                </div>\n            }\n            <div className=\"wrap-input100 validate-input input-group is-invalid\"\n                 data-bs-validate=\"Valid email is required: ex@abc.xyz\">\n                <a className={`input-group-text bg-white text-muted`}>\n                    <i className={props.iconClass} aria-hidden=\"true\" onClick={props.clickeye}></i>\n                </a>\n                <input\n                    className={`input100 border-start-0 form-control ms-0 ${(props.errors && props.errors.length > 0) && 'has-errors'}`}\n                    type={props.type} placeholder={props.placeholder} required={props.required}\n                    autoFocus={props.autoFocus}\n                    onChange={(event) => props.updateValue(formatValue(event.target))} name={props.name}/>\n            </div>\n            {props.errors && props.errors.map(error => (<div className=\"invalid-input\">{error}</div>))}\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}