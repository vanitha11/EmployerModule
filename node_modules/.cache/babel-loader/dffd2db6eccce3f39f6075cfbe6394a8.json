{"ast":null,"code":"import { setPersonalInfo, setPersonalInfoError } from './slice';\nimport { setLoading } from \"../../common/Loader/slice\";\nimport requestUtil from '../../../helpers/requestUtil';\nimport { nextTab } from \"../action\";\nexport function updatePersonalInfo(data) {\n  return async dispatch => {\n    dispatch(setPersonalInfo(data));\n  };\n}\nexport function resetErrorStatus() {\n  return async dispatch => {\n    dispatch(setPersonalInfoError(false));\n  };\n}\nexport function getCurrentPersonalInfo(_ref) {\n  let {\n    url,\n    userId\n  } = _ref;\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const response = await requestUtil(`${url}/${userId}`, 'GET');\n      dispatch(setPersonalInfo(response));\n    } catch (error) {\n      dispatch(setPersonalInfoError(true));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function savePersonalInfo(_ref2) {\n  let {\n    url,\n    userId,\n    gotoNextTab = true\n  } = _ref2;\n  return async (dispatch, getState) => {\n    dispatch(setLoading(true));\n    const {\n      data\n    } = getState().personalInfo;\n\n    try {\n      await requestUtil(`${url}`, 'POST', {\n        appUserId: userId,\n        ...data\n      });\n\n      if (gotoNextTab) {\n        dispatch(nextTab());\n      }\n    } catch (error) {\n      dispatch(setPersonalInfoError(true));\n    }\n\n    dispatch(setLoading(false));\n  };\n}","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/components/ProfileBuilder/PersonalInfo/action.js"],"names":["setPersonalInfo","setPersonalInfoError","setLoading","requestUtil","nextTab","updatePersonalInfo","data","dispatch","resetErrorStatus","getCurrentPersonalInfo","url","userId","response","error","savePersonalInfo","gotoNextTab","getState","personalInfo","appUserId"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,oBAA1B,QAAsD,SAAtD;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;AACvC,SAAO,MAAMC,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAACP,eAAe,CAACM,IAAD,CAAhB,CAAR;AACD,GAFD;AAGD;AAED,OAAO,SAASE,gBAAT,GAA4B;AACjC,SAAO,MAAMD,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAACN,oBAAoB,CAAC,KAAD,CAArB,CAAR;AACD,GAFD;AAGD;AAED,OAAO,SAASQ,sBAAT,OAA+C;AAAA,MAAf;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,GAAe;AACpD,SAAO,MAAMJ,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAACL,UAAU,CAAC,IAAD,CAAX,CAAR;;AACA,QAAI;AACF,YAAMU,QAAQ,GAAG,MAAMT,WAAW,CAAE,GAAEO,GAAI,IAAGC,MAAO,EAAlB,EAAqB,KAArB,CAAlC;AACAJ,MAAAA,QAAQ,CAACP,eAAe,CAACY,QAAD,CAAhB,CAAR;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdN,MAAAA,QAAQ,CAACN,oBAAoB,CAAC,IAAD,CAArB,CAAR;AACD;;AACDM,IAAAA,QAAQ,CAACL,UAAU,CAAC,KAAD,CAAX,CAAR;AACD,GATD;AAUD;AAED,OAAO,SAASY,gBAAT,QAA2D;AAAA,MAAjC;AAACJ,IAAAA,GAAD;AAAMC,IAAAA,MAAN;AAAcI,IAAAA,WAAW,GAAC;AAA1B,GAAiC;AAChE,SAAO,OAAOR,QAAP,EAAiBS,QAAjB,KAA8B;AACnCT,IAAAA,QAAQ,CAACL,UAAU,CAAC,IAAD,CAAX,CAAR;AACA,UAAM;AAAEI,MAAAA;AAAF,QAAWU,QAAQ,GAAGC,YAA5B;;AACA,QAAI;AACF,YAAMd,WAAW,CAAE,GAAEO,GAAI,EAAR,EAAW,MAAX,EAAmB;AAACQ,QAAAA,SAAS,EAAEP,MAAZ;AAAoB,WAAGL;AAAvB,OAAnB,CAAjB;;AACA,UAAGS,WAAH,EAAgB;AACdR,QAAAA,QAAQ,CAACH,OAAO,EAAR,CAAR;AACD;AACF,KALD,CAKE,OAAOS,KAAP,EAAc;AACdN,MAAAA,QAAQ,CAACN,oBAAoB,CAAC,IAAD,CAArB,CAAR;AACD;;AACDM,IAAAA,QAAQ,CAACL,UAAU,CAAC,KAAD,CAAX,CAAR;AACD,GAZD;AAaD","sourcesContent":["import { setPersonalInfo, setPersonalInfoError } from './slice';\nimport { setLoading } from \"../../common/Loader/slice\";\nimport requestUtil from '../../../helpers/requestUtil';\nimport { nextTab } from \"../action\";\n\nexport function updatePersonalInfo(data) {\n  return async dispatch => {\n    dispatch(setPersonalInfo(data));\n  };\n}\n\nexport function resetErrorStatus() {\n  return async dispatch => {\n    dispatch(setPersonalInfoError(false));\n  };\n}\n\nexport function getCurrentPersonalInfo({url, userId}) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n    try {\n      const response = await requestUtil(`${url}/${userId}`, 'GET');\n      dispatch(setPersonalInfo(response));\n    } catch (error) {\n      dispatch(setPersonalInfoError(true))\n    }\n    dispatch(setLoading(false));\n  };\n}\n\nexport function savePersonalInfo({url, userId, gotoNextTab=true}) {\n  return async (dispatch, getState) => {\n    dispatch(setLoading(true));\n    const { data } = getState().personalInfo;\n    try {\n      await requestUtil(`${url}`, 'POST', {appUserId: userId, ...data});\n      if(gotoNextTab) {\n        dispatch(nextTab());\n      }\n    } catch (error) {\n      dispatch(setPersonalInfoError(true))\n    }\n    dispatch(setLoading(false));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}