{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  data: {\n    firstName: '',\n    lastName: '',\n    email: '',\n    zipcode: '',\n    streetAddress: '',\n    city: '',\n    stateName: '',\n    cellPhoneNumber: '',\n    homePhoneNumber: '',\n    alternatePhoneNumber: '',\n    emergencyContact: {\n      firstName: '',\n      lastName: '',\n      phoneNumber: '',\n      relationship: ''\n    },\n    references: [{\n      firstName: '',\n      lastName: '',\n      phoneNumber: ''\n    }],\n    spokenLanguagesList: [],\n    jobDomainId: 1,\n    jobTypeId: 1,\n    emergencyContactRelationshipList: []\n  },\n  masterData: {\n    languages: [],\n    emergencyContactRelationship: []\n  }\n};\nexport const personalInfoSlice = createSlice({\n  name: 'personalInfo',\n  initialState,\n  reducers: {\n    setPersonalInfo: (state, action) => {\n      state.data = action.payload;\n\n      if (state.masterData.languages.length > 0) {\n        state.data.spokenLanguagesList = state.masterData.languages.filter(language => state.data.spokenLanguagesList.find(lang => {\n          if (lang.id) {\n            return lang.id === language.id;\n          } else {\n            return lang === language.id;\n          }\n        }));\n      }\n\n      if (!state.data.references || state.data.references.length === 0) {\n        state.data.references = [{\n          firstName: '',\n          lastName: '',\n          phoneNumber: ''\n        }];\n      }\n\n      if (!state.data.emergencyContact) {\n        state.data.emergencyContact.relationship = state.data.emergencyContact.relationship;\n      }\n      /*\n                  if(state.masterData.emergencyContactRelationship.length >0){\n                      state.data.emergencyContactRelationshipList = state.masterData.emergencyContactRelationship.filter(language => state.data.emergencyContactRelationshipList.find(lang => {\n                          if(lang.id){\n                              return lang.id === language.id\n                          } else {\n                              return lang === language.id\n                          }\n                      }));\n                  }\n      */\n\n\n      state.personalInfoError = false;\n    },\n    setCityState: (state, action) => {\n      state.data.city = action.payload.city;\n      state.data.stateName = action.payload.state;\n    },\n    setMasterData: (state, action) => {\n      if (action.payload.languages) {\n        state.masterData.languages = action.payload.languages;\n\n        if (state.data.spokenLanguagesList.length > 0) {\n          state.data.spokenLanguagesList = state.data.spokenLanguagesList.map(lang => {\n            if (!lang.id) {\n              return action.payload.languages.find(l => l.id === lang);\n            } else {\n              return lang;\n            }\n          });\n        }\n      }\n    },\n    addSpokenLanguagesList: (state, action) => {\n      const newLanguage = state.data.spokenLanguagesList ? [...state.data.spokenLanguagesList, action.payload] : [action.payload];\n      state.data.spokenLanguagesList = newLanguage;\n    },\n    removeSpokenLanguagesList: (state, action) => {\n      const newLanguage = state.data.spokenLanguagesList.filter(item => item.id !== action.payload.id);\n      state.data.spokenLanguagesList = [...newLanguage];\n    },\n    setMasterDataEmergency: (state, action) => {\n      if (action.payload.emergencyContactRelationshipcyContact) {\n        state.masterData.emergencyContactRelationship = action.payload.emergencyContactRelationshipcyContact;\n\n        if (state.data.emergencyContactRelationshipList.length > 0) {\n          state.data.emergencyContactRelationshipList = state.data.emergencyContactRelationshipList.map(lang => {\n            if (!lang.id) {\n              return action.payload.emergencyContactRelationship.find(l => l.id === lang);\n            } else {\n              return lang;\n            }\n          });\n        }\n      }\n    },\n    addEmergencyContactList: (state, action) => {\n      const newEmergencyContacte = state.data.emergencyContactRelationshipListcyContactList ? [...state.data.emergencyContactRelationshipListcyContactList, action.payload] : [action.payload];\n      state.data.emergencyContactRelationshipListcyContactList = newEmergencyContacte;\n    },\n    removeEmergencyContactList: (state, action) => {\n      const newEmergencyContacte = state.data.emergencyContactRelationshipListcyContactList.filter(item => item.id !== action.payload.id);\n      state.data.emergencyContactRelationshipListcyContactList = [...newEmergencyContacte];\n    }\n  }\n});\nexport const {\n  setPersonalInfo,\n  setCityState,\n  setMasterData,\n  addSpokenLanguagesList,\n  removeSpokenLanguagesList,\n  setMasterDataEmergency\n} = personalInfoSlice.actions;\nexport default personalInfoSlice.reducer;","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/components/ProfileBuilder/PersonalInfo/slice.js"],"names":["createSlice","initialState","data","firstName","lastName","email","zipcode","streetAddress","city","stateName","cellPhoneNumber","homePhoneNumber","alternatePhoneNumber","emergencyContact","phoneNumber","relationship","references","spokenLanguagesList","jobDomainId","jobTypeId","emergencyContactRelationshipList","masterData","languages","emergencyContactRelationship","personalInfoSlice","name","reducers","setPersonalInfo","state","action","payload","length","filter","language","find","lang","id","personalInfoError","setCityState","setMasterData","map","l","addSpokenLanguagesList","newLanguage","removeSpokenLanguagesList","item","setMasterDataEmergency","emergencyContactRelationshipcyContact","addEmergencyContactList","newEmergencyContacte","emergencyContactRelationshipListcyContactList","removeEmergencyContactList","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\nconst initialState = {\n    \n    data: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        zipcode: '',\n        streetAddress: '',\n        city: '',\n        stateName: '',\n        cellPhoneNumber: '',\n        homePhoneNumber: '',\n        alternatePhoneNumber: '',\n        emergencyContact: {\n            firstName: '',\n            lastName: '',\n            phoneNumber: '',\n            relationship: ''\n        },\n        references: [\n            {\n                firstName: '',\n                lastName: '',\n                phoneNumber: '',\n            }\n        ],\n        spokenLanguagesList: [],\n        jobDomainId: 1,\n        jobTypeId: 1,\n\n        emergencyContactRelationshipList: [],\n    },\n    masterData:{\n        languages: [],\n        emergencyContactRelationship: [],\n    },\n};\nexport const personalInfoSlice = createSlice({\n    name: 'personalInfo',\n    initialState,\n    reducers: {\n        setPersonalInfo: (state, action) => {\n            state.data = action.payload;\n            \n            if(state.masterData.languages.length >0){\n                state.data.spokenLanguagesList = state.masterData.languages.filter(language => state.data.spokenLanguagesList.find(lang => {\n                    if(lang.id){\n                        return lang.id === language.id\n                    } else {\n                        return lang === language.id\n                    }\n                }));\n            }\n            if(!state.data.references || state.data.references.length === 0){\n                state.data.references = [{\n                    firstName: '',\n                    lastName: '',\n                    phoneNumber: '',\n                }]\n            }\n\n            if(!state.data.emergencyContact){\n                state.data.emergencyContact.relationship = state.data.emergencyContact.relationship;\n            }\n/*\n            if(state.masterData.emergencyContactRelationship.length >0){\n                state.data.emergencyContactRelationshipList = state.masterData.emergencyContactRelationship.filter(language => state.data.emergencyContactRelationshipList.find(lang => {\n                    if(lang.id){\n                        return lang.id === language.id\n                    } else {\n                        return lang === language.id\n                    }\n                }));\n            }\n*/\n            state.personalInfoError = false;\n            \n            \n        },\n        setCityState: (state, action) => {\n            state.data.city = action.payload.city;\n            state.data.stateName = action.payload.state;\n        },\n        setMasterData: (state, action) => {           \n            if(action.payload.languages){\n                state.masterData.languages = action.payload.languages;\n                if(state.data.spokenLanguagesList.length > 0){\n                    state.data.spokenLanguagesList = state.data.spokenLanguagesList.map(lang => {\n                        if(!lang.id){\n                            return action.payload.languages.find(l => l.id === lang);\n                        } else {\n                            return lang;\n                        }\n                    })\n                }\n            }\n\n        },\n        addSpokenLanguagesList: (state, action) => {\n            const newLanguage = state.data.spokenLanguagesList ? [...state.data.spokenLanguagesList, action.payload] : [action.payload];\n            state.data.spokenLanguagesList = newLanguage;\n        },\n        removeSpokenLanguagesList: (state, action) => {\n            const newLanguage = state.data.spokenLanguagesList.filter(item => item.id !== action.payload.id);\n            state.data.spokenLanguagesList = [...newLanguage];\n        },\n\n        setMasterDataEmergency: (state, action) => { \n            if(action.payload.emergencyContactRelationshipcyContact){\n                state.masterData.emergencyContactRelationship = action.payload.emergencyContactRelationshipcyContact;\n                if(state.data.emergencyContactRelationshipList.length > 0){\n                    state.data.emergencyContactRelationshipList = state.data.emergencyContactRelationshipList.map(lang => {\n                        if(!lang.id){\n                            return action.payload.emergencyContactRelationship.find(l => l.id === lang);\n                        } else {\n                            return lang;\n                        }\n                    })\n                }\n            }\n        },\n\n        \n        addEmergencyContactList: (state, action) => {\n            const newEmergencyContacte = state.data.emergencyContactRelationshipListcyContactList ? [...state.data.emergencyContactRelationshipListcyContactList, action.payload] : [action.payload];\n            state.data.emergencyContactRelationshipListcyContactList = newEmergencyContacte;\n        },\n        removeEmergencyContactList: (state, action) => {\n            const newEmergencyContacte = state.data.emergencyContactRelationshipListcyContactList.filter(item => item.id !== action.payload.id);\n            state.data.emergencyContactRelationshipListcyContactList = [...newEmergencyContacte];\n        },\n        \n        \n    }\n});\nexport const { setPersonalInfo,setCityState, setMasterData, addSpokenLanguagesList, removeSpokenLanguagesList,setMasterDataEmergency} = personalInfoSlice.actions;\nexport default personalInfoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}