{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  emergencyContactRelationshipList: {},\n  data: {\n    firstName: '',\n    lastName: '',\n    email: '',\n    zipcode: '',\n    streetAddress: '',\n    city: '',\n    stateName: '',\n    cellPhoneNumber: '',\n    homePhoneNumber: '',\n    alternatePhoneNumber: '',\n    emergencyContact: {\n      firstName: '',\n      lastName: '',\n      phoneNumber: '',\n      relationship: ''\n    },\n    references: [{\n      firstName: '',\n      lastName: '',\n      phoneNumber: ''\n    }],\n    spokenLanguagesList: [],\n    jobDomainId: 1,\n    jobTypeId: 1\n  },\n  masterData: {\n    languages: [],\n    emergencyContactRelationshipList: []\n  }\n};\nexport const personalInfoSlice = createSlice({\n  name: 'personalInfo',\n  initialState,\n  reducers: {\n    setPersonalInfo: (state, action) => {\n      state.data = action.payload;\n\n      if (state.masterData.languages.length > 0) {\n        state.data.spokenLanguagesList = state.masterData.languages.filter(language => state.data.spokenLanguagesList.find(lang => {\n          if (lang.id) {\n            return lang.id === language.id;\n          } else {\n            return lang === language.id;\n          }\n        }));\n      }\n\n      if (!state.data.references || state.data.references.length === 0) {\n        state.data.references = [{\n          firstName: '',\n          lastName: '',\n          phoneNumber: ''\n        }];\n      }\n\n      state.personalInfoError = false;\n    },\n    setCityState: (state, action) => {\n      state.data.city = action.payload.city;\n      state.data.stateName = action.payload.state;\n    },\n    setMasterData: (state, action) => {\n      console.log(action.payload.emergencyContactRelationship);\n\n      if (action.payload.languages) {\n        state.masterData.languages = action.payload.languages;\n\n        if (state.data.spokenLanguagesList.length > 0) {\n          state.data.spokenLanguagesList = state.data.spokenLanguagesList.map(lang => {\n            if (!lang.id) {\n              return action.payload.languages.find(l => l.id === lang);\n            } else {\n              return lang;\n            }\n          });\n        }\n      }\n    },\n    addSpokenLanguagesList: (state, action) => {\n      const newLanguage = state.data.spokenLanguagesList ? [...state.data.spokenLanguagesList, action.payload] : [action.payload];\n      state.data.spokenLanguagesList = newLanguage;\n    },\n    removeSpokenLanguagesList: (state, action) => {\n      const newLanguage = state.data.spokenLanguagesList.filter(item => item.id !== action.payload.id);\n      state.data.spokenLanguagesList = [...newLanguage];\n    },\n    //  setEmergencyContactRelationship: (state, action) => {\n    // state.emergencyContactRelationship1 = action.payload;\n    //  },\n    setMasterDatas: (state, action) => {\n      state.masterDatas.emergencyContactRelationshipList = action.payload.emergencyContactRelationship;\n      console.log(state.masterDatas.emergencyContactRelationshipList);\n      {\n        /*\n                   if(action.payload.emergencyContactRelationship){\n                       if(action.payload.emergencyContactRelationship){\n                           state.masterData.emergencyContactRelationshipList = action.payload.emergencyContactRelationship;\n                           if(state.masterData.emergencyContactRelationshipList.length > 0){\n                               {state.masterData.emergencyContactRelationshipList = state.masterData.emergencyContactRelationshipList.map(lang => {\n                                   if(!lang.id){\n                                       return action.payload.emergencyContactRelationship.find(l => l.id === lang);\n                                   } else {\n                                       return lang;\n                                   }\n                               })}\n                              return state.masterData.emergencyContactRelationshipList;\n                           }\n                       }\n                   }*/\n      } // if(action.payload.shifts) {\n      //   state.emergencyContactRelationship = action.payload.emergencyContactRelationship;\n      //  }\n    }\n  }\n});\nexport const {\n  setPersonalInfo,\n  setCityState,\n  setMasterData,\n  setMasterDatas,\n  addSpokenLanguagesList,\n  removeSpokenLanguagesList,\n  setEmergencyContactRelationship\n} = personalInfoSlice.actions;\nexport default personalInfoSlice.reducer;","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/components/ProfileBuilder/PersonalInfo/slice.js"],"names":["createSlice","initialState","emergencyContactRelationshipList","data","firstName","lastName","email","zipcode","streetAddress","city","stateName","cellPhoneNumber","homePhoneNumber","alternatePhoneNumber","emergencyContact","phoneNumber","relationship","references","spokenLanguagesList","jobDomainId","jobTypeId","masterData","languages","personalInfoSlice","name","reducers","setPersonalInfo","state","action","payload","length","filter","language","find","lang","id","personalInfoError","setCityState","setMasterData","console","log","emergencyContactRelationship","map","l","addSpokenLanguagesList","newLanguage","removeSpokenLanguagesList","item","setMasterDatas","masterDatas","setEmergencyContactRelationship","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\nconst initialState = {\n    emergencyContactRelationshipList:{},\n    data: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        zipcode: '',\n        streetAddress: '',\n        city: '',\n        stateName: '',\n        cellPhoneNumber: '',\n        homePhoneNumber: '',\n        alternatePhoneNumber: '',\n        emergencyContact: {\n            firstName: '',\n            lastName: '',\n            phoneNumber: '',\n            relationship: ''\n        },\n        references: [\n            {\n                firstName: '',\n                lastName: '',\n                phoneNumber: '',\n            }\n        ],\n        spokenLanguagesList: [],\n        jobDomainId: 1,\n        jobTypeId: 1\n    },\n    masterData:{\n        languages: [],\n        emergencyContactRelationshipList: [],\n    },\n};\nexport const personalInfoSlice = createSlice({\n    name: 'personalInfo',\n    initialState,\n    reducers: {\n        setPersonalInfo: (state, action) => {\n            state.data = action.payload;\n            if(state.masterData.languages.length >0){\n                state.data.spokenLanguagesList = state.masterData.languages.filter(language => state.data.spokenLanguagesList.find(lang => {\n                    if(lang.id){\n                        return lang.id === language.id\n                    } else {\n                        return lang === language.id\n                    }\n                }));\n            }\n            if(!state.data.references || state.data.references.length === 0){\n                state.data.references = [{\n                    firstName: '',\n                    lastName: '',\n                    phoneNumber: '',\n                }]\n            }\n            state.personalInfoError = false;\n        },\n        setCityState: (state, action) => {\n            state.data.city = action.payload.city;\n            state.data.stateName = action.payload.state;\n        },\n        setMasterData: (state, action) => {\n            console.log(action.payload.emergencyContactRelationship)\n            if(action.payload.languages){\n                state.masterData.languages = action.payload.languages;\n                if(state.data.spokenLanguagesList.length > 0){\n                    state.data.spokenLanguagesList = state.data.spokenLanguagesList.map(lang => {\n                        if(!lang.id){\n                            return action.payload.languages.find(l => l.id === lang);\n                        } else {\n                            return lang;\n                        }\n                    })\n                }\n            }\n        },\n        addSpokenLanguagesList: (state, action) => {\n            const newLanguage = state.data.spokenLanguagesList ? [...state.data.spokenLanguagesList, action.payload] : [action.payload];\n            state.data.spokenLanguagesList = newLanguage;\n        },\n        removeSpokenLanguagesList: (state, action) => {\n            const newLanguage = state.data.spokenLanguagesList.filter(item => item.id !== action.payload.id);\n            state.data.spokenLanguagesList = [...newLanguage];\n        },\n        \n      //  setEmergencyContactRelationship: (state, action) => {\n           // state.emergencyContactRelationship1 = action.payload;\n            \n      //  },\n        setMasterDatas: (state, action) => {\n            \n            state.masterDatas.emergencyContactRelationshipList = action.payload.emergencyContactRelationship;\n            console.log(state.masterDatas.emergencyContactRelationshipList);\n{/*\n            if(action.payload.emergencyContactRelationship){\n                if(action.payload.emergencyContactRelationship){\n                    state.masterData.emergencyContactRelationshipList = action.payload.emergencyContactRelationship;\n                    if(state.masterData.emergencyContactRelationshipList.length > 0){\n                        {state.masterData.emergencyContactRelationshipList = state.masterData.emergencyContactRelationshipList.map(lang => {\n                            if(!lang.id){\n                                return action.payload.emergencyContactRelationship.find(l => l.id === lang);\n                            } else {\n                                return lang;\n                            }\n                        })}\n                       return state.masterData.emergencyContactRelationshipList;\n                    }\n                }\n            }*/}\n\n           // if(action.payload.shifts) {\n             //   state.emergencyContactRelationship = action.payload.emergencyContactRelationship;\n               \n          //  }\n        }\n    }\n});\nexport const { setPersonalInfo,setCityState, setMasterData,setMasterDatas, addSpokenLanguagesList, removeSpokenLanguagesList,setEmergencyContactRelationship} = personalInfoSlice.actions;\nexport default personalInfoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}