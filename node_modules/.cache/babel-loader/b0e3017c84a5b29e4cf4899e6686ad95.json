{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\Overture\\\\DevOTWebUI\\\\src\\\\components\\\\common\\\\TextField\\\\index.js\";\nimport React from \"react\";\nimport './input.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default (props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrap-input100 validate-input input-group is-invalid\",\n      \"data-bs-validate\": \"Valid email is required: ex@abc.xyz\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: `input-group-text bg-white text-muted`,\n        href: props.click1,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: props.iconClass,\n          \"aria-hidden\": \"true\",\n          onClick: props.clickeye\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: `input100 border-start-0 form-control ms-0 ${props.errors && props.errors.length > 0 && 'has-errors'}`,\n        type: props.type,\n        placeholder: props.placeholder,\n        required: props.required,\n        autoFocus: props.autoFocus,\n        onChange: event => props.updateValue(event.target),\n        name: props.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }, this), props.errors && props.errors.map(error => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"invalid-input\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 57\n    }, this))]\n  }, void 0, true);\n});","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/components/common/TextField/index.js"],"names":["React","props","click1","iconClass","clickeye","errors","length","type","placeholder","required","autoFocus","event","updateValue","target","name","map","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;;;AAEA,gBAAgBC,KAAD,IAAW;AACtB,sBACI;AAAA,4BACA;AAAK,MAAA,SAAS,EAAC,qDAAf;AAAqE,0BAAiB,qCAAtF;AAAA,8BACI;AAAG,QAAA,SAAS,EAAG,sCAAf;AAAsD,QAAA,IAAI,EAAEA,KAAK,CAACC,MAAlE;AAAA,+BACI;AAAG,UAAA,SAAS,EAAED,KAAK,CAACE,SAApB;AAA+B,yBAAY,MAA3C;AAAkD,UAAA,OAAO,EAAEF,KAAK,CAACG;AAAjE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAO,QAAA,SAAS,EAAG,6CAA6CH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,CAAaC,MAAb,GAAoB,CAArC,IAA2C,YAAa,EAAvH;AACO,QAAA,IAAI,EAAEL,KAAK,CAACM,IADnB;AACyB,QAAA,WAAW,EAAEN,KAAK,CAACO,WAD5C;AACyD,QAAA,QAAQ,EAAEP,KAAK,CAACQ,QADzE;AAEO,QAAA,SAAS,EAAER,KAAK,CAACS,SAFxB;AAGO,QAAA,QAAQ,EAAGC,KAAD,IAAWV,KAAK,CAACW,WAAN,CAAkBD,KAAK,CAACE,MAAxB,CAH5B;AAG6D,QAAA,IAAI,EAAEZ,KAAK,CAACa;AAHzE;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,EAUKb,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,CAAaU,GAAb,CAAiBC,KAAK,iBAAK;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,gBAAgCA;AAAhC;AAAA;AAAA;AAAA;AAAA,YAA3B,CAVrB;AAAA,kBADJ;AAcH,CAfD","sourcesContent":["import React from \"react\";\nimport './input.css';\n\nexport default (props) => {\n    return(\n        <>\n        <div className=\"wrap-input100 validate-input input-group is-invalid\" data-bs-validate=\"Valid email is required: ex@abc.xyz\">\n            <a className={`input-group-text bg-white text-muted`} href={props.click1}>\n                <i className={props.iconClass} aria-hidden=\"true\" onClick={props.clickeye}></i>\n            </a>\n            <input className={`input100 border-start-0 form-control ms-0 ${(props.errors && props.errors.length>0) && 'has-errors'}`}\n                   type={props.type} placeholder={props.placeholder} required={props.required}\n                   autoFocus={props.autoFocus}\n                   onChange={(event) => props.updateValue(event.target)} name={props.name}/>\n        </div>\n            {props.errors && props.errors.map(error => (<div className=\"invalid-input\">{error}</div>))}\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}