{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\Overture\\\\DevOTWebUI_ReactTeam\\\\src\\\\components\\\\common\\\\TextField\\\\withLabel.js\";\nimport React from \"react\";\nimport './input.css';\nimport formatters from \"./formatters\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default (props => {\n  const formatValue = target => {\n    if (props.format) {\n      target.value = formatters(target.value, props.format);\n    }\n\n    return target;\n  };\n\n  const divClass = props.divClass ? props.divClass : 'col-lg-6 col-md-12';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: divClass,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [!props.noLabel && /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: props.name,\n        children: props.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 36\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: props.name,\n        value: props.value,\n        placeholder: props.placeholder,\n        name: props.name,\n        onChange: event => props.updateValue(formatValue(event.target)),\n        autoFocus: props.autoFocus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), props.errors && props.errors.map(error => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invalid-input\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 61\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n});","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI_ReactTeam/src/components/common/TextField/withLabel.js"],"names":["React","formatters","props","formatValue","target","format","value","divClass","noLabel","name","label","placeholder","event","updateValue","autoFocus","errors","map","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,gBAAgBC,KAAD,IAAW;AACtB,QAAMC,WAAW,GAAIC,MAAD,IAAY;AAC5B,QAAIF,KAAK,CAACG,MAAV,EAAkB;AACdD,MAAAA,MAAM,CAACE,KAAP,GAAeL,UAAU,CAACG,MAAM,CAACE,KAAR,EAAeJ,KAAK,CAACG,MAArB,CAAzB;AACH;;AACD,WAAOD,MAAP;AACH,GALD;;AAMA,QAAMG,QAAQ,GAAGL,KAAK,CAACK,QAAN,GAAiBL,KAAK,CAACK,QAAvB,GAAkC,oBAAnD;AACA,sBACI;AAAK,IAAA,SAAS,EAAEA,QAAhB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,iBACK,CAACL,KAAK,CAACM,OAAP,iBAAkB;AAAO,QAAA,OAAO,EAAEN,KAAK,CAACO,IAAtB;AAAA,kBAA6BP,KAAK,CAACQ;AAAnC;AAAA;AAAA;AAAA;AAAA,cADvB,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,SAAS,EAAC,cAA7B;AAA4C,QAAA,EAAE,EAAER,KAAK,CAACO,IAAtD;AAA4D,QAAA,KAAK,EAAEP,KAAK,CAACI,KAAzE;AACO,QAAA,WAAW,EAAEJ,KAAK,CAACS,WAD1B;AACuC,QAAA,IAAI,EAAET,KAAK,CAACO,IADnD;AAEO,QAAA,QAAQ,EAAGG,KAAD,IAAWV,KAAK,CAACW,WAAN,CAAkBV,WAAW,CAACS,KAAK,CAACR,MAAP,CAA7B,CAF5B;AAGO,QAAA,SAAS,EAAEF,KAAK,CAACY;AAHxB;AAAA;AAAA;AAAA;AAAA,cAFJ,EAMKZ,KAAK,CAACa,MAAN,IAAgBb,KAAK,CAACa,MAAN,CAAaC,GAAb,CAAiBC,KAAK,iBAAK;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,kBAAgCA;AAAhC;AAAA;AAAA;AAAA;AAAA,cAA3B,CANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CApBD","sourcesContent":["import React from \"react\";\nimport './input.css';\nimport formatters from \"./formatters\";\n\nexport default (props) => {\n    const formatValue = (target) => {\n        if (props.format) {\n            target.value = formatters(target.value, props.format);\n        }\n        return target;\n    };\n    const divClass = props.divClass ? props.divClass : 'col-lg-6 col-md-12';\n    return (\n        <div className={divClass}>\n            <div className=\"form-group\">\n                {!props.noLabel && <label htmlFor={props.name}>{props.label}</label>}\n                <input type=\"text\" className=\"form-control\" id={props.name} value={props.value}\n                       placeholder={props.placeholder} name={props.name}\n                       onChange={(event) => props.updateValue(formatValue(event.target))}\n                       autoFocus={props.autoFocus}/>\n                {props.errors && props.errors.map(error => (<div className=\"invalid-input\">{error}</div>))}\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}