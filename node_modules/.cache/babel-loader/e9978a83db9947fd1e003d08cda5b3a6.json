{"ast":null,"code":"import { setPersonalInfo, setCityState, setMasterData, addSpokenLanguagesList, removeSpokenLanguagesList, setEmergencyContactRelationship, setMasterDatas } from './slice';\nimport { setError, resetError } from \"../slice\";\nimport { setLoading } from \"../../common/Loader/slice\";\nimport requestUtil from '../../../helpers/requestUtil';\nimport { nextTab } from \"../action\";\nimport useConfiguration from \"../../../hooks/useConfiguration\";\nconst config = useConfiguration();\nconst urlEmergency = config.baseUrl;\nexport function updatePersonalInfo(data) {\n  return async dispatch => {\n    dispatch(setPersonalInfo(data));\n  };\n}\nexport function resetErrorStatus() {\n  return async dispatch => {\n    dispatch(resetError());\n  };\n}\nexport function getCurrentPersonalInfo(_ref) {\n  let {\n    url,\n    userId\n  } = _ref;\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const response = await requestUtil(`${url}/${userId}`, 'GET');\n      const emergencyContactRelationship = await requestUtil(`${urlEmergency}/Dropdown/GetEmergencyContactRelationships`, 'GET');\n      dispatch(setPersonalInfo(response));\n      dispatch(setMasterDatas({\n        emergencyContactRelationship\n      }));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function savePersonalInfo(_ref2) {\n  let {\n    url,\n    candidateId,\n    userId,\n    gotoNextTab = true\n  } = _ref2;\n  return async (dispatch, getState) => {\n    dispatch(setLoading(true));\n    const {\n      data\n    } = getState().personalInfo;\n\n    try {\n      await requestUtil(`${url}`, 'POST', {\n        appUserId: userId,\n        candidateId,\n        ...data,\n        spokenLanguagesList: data.spokenLanguagesList.map(item => item.id)\n      });\n\n      if (gotoNextTab) {\n        dispatch(nextTab());\n      }\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function getCityState(url) {\n  return async dispatch => {\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setCityState(response));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n  };\n}\nexport function getSpokenLanguages(url) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setMasterData({\n        languages: response\n      }));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function updateLanguageList(lang, action) {\n  return dispatch => {\n    switch (action) {\n      case 'add':\n        dispatch(addSpokenLanguagesList(lang));\n        break;\n\n      case 'remove':\n        dispatch(removeSpokenLanguagesList(lang));\n        break;\n\n      default:\n        break;\n    }\n  };\n}\nexport function getMasterData(baseUrl) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const emergencyContactRelationship = await requestUtil(`${baseUrl}/Dropdown/GetEmergencyContactRelationships`, 'GET');\n      let keyIndex = 0;\n      dispatch(setLoading(false));\n      dispatch(setMasterDatas({\n        emergencyContactRelationship\n      }));\n    } catch (error) {\n      dispatch(setLoading(false));\n      dispatch(setError(error.message));\n    }\n  };\n}\nexport function updateemergencyContactRelationship(value) {\n  return dispatch => {\n    dispatch(setEmergencyContactRelationship(value));\n  };\n}","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/components/ProfileBuilder/PersonalInfo/action.js"],"names":["setPersonalInfo","setCityState","setMasterData","addSpokenLanguagesList","removeSpokenLanguagesList","setEmergencyContactRelationship","setMasterDatas","setError","resetError","setLoading","requestUtil","nextTab","useConfiguration","config","urlEmergency","baseUrl","updatePersonalInfo","data","dispatch","resetErrorStatus","getCurrentPersonalInfo","url","userId","response","emergencyContactRelationship","error","message","savePersonalInfo","candidateId","gotoNextTab","getState","personalInfo","appUserId","spokenLanguagesList","map","item","id","getCityState","getSpokenLanguages","languages","updateLanguageList","lang","action","getMasterData","keyIndex","updateemergencyContactRelationship","value"],"mappings":"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","sourcesContent":["import { setPersonalInfo, setCityState, setMasterData, \n  addSpokenLanguagesList, removeSpokenLanguagesList ,\n  setEmergencyContactRelationship,\n  setMasterDatas,} from './slice';\nimport { setError, resetError } from \"../slice\";\nimport { setLoading } from \"../../common/Loader/slice\";\nimport requestUtil from '../../../helpers/requestUtil';\nimport { nextTab } from \"../action\";\nimport useConfiguration from \"../../../hooks/useConfiguration\";\n\nconst config = useConfiguration();\nconst urlEmergency = config.baseUrl;\nexport function updatePersonalInfo(data) {\n  return async dispatch => {\n    dispatch(setPersonalInfo(data));\n  };\n}\n\nexport function resetErrorStatus() {\n  return async dispatch => {\n    dispatch(resetError());\n  };\n}\n\nexport function getCurrentPersonalInfo({url, userId}) {\n\n  return async dispatch => {\n    dispatch(setLoading(true));\n    try {      \n\n      const response = await requestUtil(`${url}/${userId}`, 'GET');\n      \n      const emergencyContactRelationship = await requestUtil(`${urlEmergency}/Dropdown/GetEmergencyContactRelationships`, 'GET');\n\n      dispatch(setPersonalInfo(response));\n      dispatch(setMasterDatas({\n        \n        emergencyContactRelationship\n      }));\n    } catch (error) {\n      dispatch(setError(error.message))\n    }\n    dispatch(setLoading(false));\n  };\n}\n\nexport function savePersonalInfo({url, candidateId, userId, gotoNextTab=true}) {\n  return async (dispatch, getState) => {\n    dispatch(setLoading(true));\n    const { data } = getState().personalInfo;\n    try {\n      await requestUtil(`${url}`, 'POST', {appUserId: userId, candidateId,\n        ...data, spokenLanguagesList: data.spokenLanguagesList.map(item => item.id)});\n      if(gotoNextTab) {\n        dispatch(nextTab());\n      }\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n    dispatch(setLoading(false));\n  };\n}\n\nexport function getCityState(url) {\n  return async dispatch => {\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setCityState(response));\n    } catch (error) {\n      dispatch(setError(error.message))\n    }\n  };\n}\n\nexport function getSpokenLanguages(url) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n    try {\n      const response = await requestUtil(url, 'GET');\n      dispatch(setMasterData({languages: response} ));\n    } catch (error) {\n      dispatch(setError(error.message))\n    }\n    dispatch(setLoading(false));\n  };\n}\n\nexport function updateLanguageList(lang, action) {\n  return (dispatch) => {\n    switch (action) {\n      case 'add':\n        dispatch(addSpokenLanguagesList(lang));\n        break;\n      case 'remove':\n        dispatch(removeSpokenLanguagesList(lang));\n        break;\n      default:\n        break;\n    }\n  };\n  \n}\n\nexport function getMasterData(baseUrl) {\n  return async (dispatch) => {\n    dispatch(setLoading(true));\n    try {\n     \n      const emergencyContactRelationship = await requestUtil(`${baseUrl}/Dropdown/GetEmergencyContactRelationships`, 'GET');\n      \n      let keyIndex = 0;\n      \n\n      dispatch(setLoading(false));\n      dispatch(setMasterDatas({\n        \n        emergencyContactRelationship\n      }));\n    } catch (error) {\n      dispatch(setLoading(false));\n      dispatch(setError(error.message));\n    }\n  };\n}\n\nexport function updateemergencyContactRelationship(value) {\n  return (dispatch) => {\n    dispatch(setEmergencyContactRelationship(value));\n  };\n}\n\n"]},"metadata":{},"sourceType":"module"}