{"ast":null,"code":"import React from\"react\";import formatters from\"./formatters\";import'./input.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default(function(props){var formatValue=function formatValue(target){if(props.format){target.value=formatters(target.value,props.format);}return target;};return/*#__PURE__*/_jsxs(_Fragment,{children:[props.label&&/*#__PURE__*/_jsx(\"div\",{className:\"wrap-input100 validate-input input-group\",children:/*#__PURE__*/_jsx(\"label\",{htmlFor:props.name,className:\"logintextspace\",children:/*#__PURE__*/_jsx(\"h5\",{children:props.label})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"wrap-input100 validate-input input-group is-invalid\",\"data-bs-validate\":\"Valid email is required: ex@abc.xyz\",children:[/*#__PURE__*/_jsx(\"a\",{className:\"input-group-text bg-white text-muted\",children:/*#__PURE__*/_jsx(\"i\",{className:props.iconClass,\"aria-hidden\":\"true\",onClick:props.clickeye})}),/*#__PURE__*/_jsx(\"input\",{className:\"input100 border-start-0 form-control ms-0 \".concat(props.errors&&props.errors.length>0&&'has-errors'),type:props.type,placeholder:props.placeholder,required:props.required,autoFocus:props.autoFocus,onChange:function onChange(event){return props.updateValue(formatValue(event.target));},name:props.name})]}),props.errors&&props.errors.map(function(error){return/*#__PURE__*/_jsx(\"div\",{className:\"invalid-input\",children:error});})]});});","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/components/common/TextField/index.js"],"names":["React","formatters","props","formatValue","target","format","value","label","name","iconClass","clickeye","errors","length","type","placeholder","required","autoFocus","event","updateValue","map","error"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAO,aAAP,C,6IAEA,eAAe,SAACC,KAAD,CAAW,CACtB,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,MAAD,CAAY,CAC5B,GAAIF,KAAK,CAACG,MAAV,CAAkB,CACdD,MAAM,CAACE,KAAP,CAAeL,UAAU,CAACG,MAAM,CAACE,KAAR,CAAeJ,KAAK,CAACG,MAArB,CAAzB,CACH,CACD,MAAOD,CAAAA,MAAP,CACH,CALD,CAMA,mBACI,2BAEQF,KAAK,CAACK,KAAN,eAAe,YAAK,SAAS,CAAC,0CAAf,uBACX,cAAO,OAAO,CAAEL,KAAK,CAACM,IAAtB,CAA4B,SAAS,CAAC,gBAAtC,uBAAuD,oBAAKN,KAAK,CAACK,KAAX,EAAvD,EADW,EAFvB,cAMI,aAAK,SAAS,CAAC,qDAAf,CACK,mBAAiB,qCADtB,wBAEI,UAAG,SAAS,uCAAZ,uBACI,UAAG,SAAS,CAAEL,KAAK,CAACO,SAApB,CAA+B,cAAY,MAA3C,CAAkD,OAAO,CAAEP,KAAK,CAACQ,QAAjE,EADJ,EAFJ,cAKI,cACI,SAAS,qDAAgDR,KAAK,CAACS,MAAN,EAAgBT,KAAK,CAACS,MAAN,CAAaC,MAAb,CAAsB,CAAvC,EAA6C,YAA5F,CADb,CAEI,IAAI,CAAEV,KAAK,CAACW,IAFhB,CAEsB,WAAW,CAAEX,KAAK,CAACY,WAFzC,CAEsD,QAAQ,CAAEZ,KAAK,CAACa,QAFtE,CAGI,SAAS,CAAEb,KAAK,CAACc,SAHrB,CAII,QAAQ,CAAE,kBAACC,KAAD,QAAWf,CAAAA,KAAK,CAACgB,WAAN,CAAkBf,WAAW,CAACc,KAAK,CAACb,MAAP,CAA7B,CAAX,EAJd,CAIuE,IAAI,CAAEF,KAAK,CAACM,IAJnF,EALJ,GANJ,CAiBKN,KAAK,CAACS,MAAN,EAAgBT,KAAK,CAACS,MAAN,CAAaQ,GAAb,CAAiB,SAAAC,KAAK,qBAAK,YAAK,SAAS,CAAC,eAAf,UAAgCA,KAAhC,EAAL,EAAtB,CAjBrB,GADJ,CAqBH,CA5BD","sourcesContent":["import React from \"react\";\nimport formatters from \"./formatters\";\nimport './input.css';\n\nexport default (props) => {\n    const formatValue = (target) => {\n        if (props.format) {\n            target.value = formatters(target.value, props.format);\n        }\n        return target;\n    };\n    return (\n        <>\n            {\n                props.label && <div className=\"wrap-input100 validate-input input-group\">\n                    <label htmlFor={props.name} className=\"logintextspace\"><h5>{props.label}</h5></label>\n                </div>\n            }\n            <div className=\"wrap-input100 validate-input input-group is-invalid\"\n                 data-bs-validate=\"Valid email is required: ex@abc.xyz\">\n                <a className={`input-group-text bg-white text-muted`}>\n                    <i className={props.iconClass} aria-hidden=\"true\" onClick={props.clickeye}></i>\n                </a>\n                <input\n                    className={`input100 border-start-0 form-control ms-0 ${(props.errors && props.errors.length > 0) && 'has-errors'}`}\n                    type={props.type} placeholder={props.placeholder} required={props.required}\n                    autoFocus={props.autoFocus}\n                    onChange={(event) => props.updateValue(formatValue(event.target))} name={props.name}/>\n            </div>\n            {props.errors && props.errors.map(error => (<div className=\"invalid-input\">{error}</div>))}\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}