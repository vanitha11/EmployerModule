{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_Project\\\\DevOTWebUI_ReactTeam\\\\src\\\\components\\\\ResetPassword\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport Loader from \"../common/Loader\";\nimport TextField from \"../common/TextField\";\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { setLoadingPageTrue, setLoadingPageFalse } from \"../common/Loader/action\";\nimport { useDispatch } from \"react-redux\";\nimport useConfiguration from \"../../hooks/useConfiguration\";\nimport requestUtil from \"../../helpers/requestUtil\";\nimport useValidation from \"../../hooks/useValidation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const code = encodeURIComponent(searchParams.get(\"resetCode\"));\n  const config = useConfiguration();\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [formErrors, setFormErrors] = useState({});\n  const [validEmail, setValidEmail] = useState(false);\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  const url = config.baseUrl;\n  const validate = useValidation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  useEffect(() => {\n    document.title = \"Reset Password\";\n\n    if (code && url) {\n      dispatch(setLoadingPageTrue()); //requestUtil(`${url}/Candidates/validateaccountforforgetpassword?activationcode=${code}`, \"GET\").then((result) => {\n\n      requestUtil(`${url}/Candidates/validateaccountforforgetpasswordcandidate?activationcode=${code}`, \"POST\", {\n        EncryptedString: code\n      }).then(result => {\n        dispatch(setLoadingPageFalse());\n\n        if (result && result.isEmailExist) {\n          setValidEmail(true);\n          setUserName(result.email);\n        } else {\n          setErrorMessage(result.message);\n        }\n      }).catch(error => {\n        dispatch(setLoadingPageFalse());\n        setErrorMessage(error.message || \"Something went wrong\");\n      });\n    }\n  }, [code, url]);\n\n  const validateForm = () => {\n    const result = validate('resetPassword', [{\n      name: 'newPassword',\n      data: newPassword\n    }, {\n      name: 'confirmNewPassword',\n      data: confirmNewPassword\n    }]);\n\n    if (result.valid) {\n      setFormErrors({});\n    } else {\n      setFormErrors(result.errors);\n    }\n\n    return result.valid;\n  };\n\n  const customPasswordCheck = () => {\n    if (newPassword && confirmNewPassword) {\n      if (newPassword !== confirmNewPassword) {\n        setFormErrors({\n          'confirmNewPassword': [\"Password and Confirm Password must be same\"]\n        });\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const updateFormValue = target => {\n    if (target.name === \"newPassword\") {\n      setNewPassword(target.value);\n    } else if (target.name === \"confirmNewPassword\") {\n      setConfirmNewPassword(target.value);\n    }\n  };\n\n  const resetPassword = event => {\n    event.preventDefault();\n\n    if (validateForm() && customPasswordCheck()) {\n      dispatch(setLoadingPageTrue());\n      requestUtil(`${url}/Candidates/resetpassword/${userName}/${newPassword}`, \"POST\", {\n        password: formErrors.password\n      }).then(result => {\n        dispatch(setLoadingPageFalse());\n\n        if (result && result.isEmailExist) {\n          navigate(\"/\");\n        } else {\n          setErrorMessage(result.message);\n        }\n      }).catch(error => {\n        dispatch(setLoadingPageFalse());\n        setErrorMessage(error.message);\n      });\n    }\n  };\n\n  const gotoLogin = e => {\n    e.preventDefault();\n    navigate(\"/\");\n  };\n\n  const [passwordType, setPasswordType] = useState(\"password\");\n  const [passwordInput, setPasswordInput] = useState(\"\");\n  const [iconStyleText, seticonStyleText] = useState(\"zmdi zmdi-eye-off text-muted\");\n\n  const handlePasswordChange = evnt => {\n    setPasswordInput(evnt.target.value);\n  };\n\n  const togglePassword = () => {\n    if (passwordType === \"password\") {\n      setPasswordType(\"text\");\n      seticonStyleText(\"zmdi zmdi-eye text-muted\");\n      return;\n    }\n\n    setPasswordType(\"password\");\n    seticonStyleText(\"zmdi zmdi-eye-off text-muted\");\n  };\n\n  const [passwordTypeConfirm, setPasswordTypeConfirm] = useState(\"password\");\n  const [passwordInputConfirm, setPasswordInputConfirm] = useState(\"\");\n  const [iconStyleTextConfirm, seticonStyleTextConfirm] = useState(\"zmdi zmdi-eye-off text-muted\");\n\n  const handlePasswordChangeConfirm = evnt => {\n    setPasswordInputConfirm(evnt.target.value);\n  };\n\n  const togglePasswordConfirm = () => {\n    if (passwordTypeConfirm === \"password\") {\n      setPasswordTypeConfirm(\"text\");\n      seticonStyleTextConfirm(\"zmdi zmdi-eye text-muted\");\n      return;\n    }\n\n    setPasswordTypeConfirm(\"password\");\n    seticonStyleTextConfirm(\"zmdi zmdi-eye-off text-muted\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-login100\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wrap-login100 p-6\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"login100-form validate-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"login100-form-title pb-5\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: \"assets/images/brand/logo-3.png\",\n                  className: \"header-brand-img\",\n                  alt: \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"login100-form-title pb-5\",\n              children: \"Password Reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }, this), errorMessage && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"toast wrap-input100 align-items-center text-white bg-danger border-0 show\",\n                role: \"alert\",\n                \"aria-live\": \"assertive\",\n                \"aria-atomic\": \"true\",\n                \"data-bs-autohide\": \"false\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"d-flex\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"toast-body\",\n                    children: errorMessage || 'Reset password failed! Please try again.'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 152,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"\\xA0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true), validEmail && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                placeholder: \"Password\",\n                divClass: \"col-lg-12\",\n                label: \"New Password\",\n                name: 'newPassword',\n                type: passwordType,\n                clickeye: togglePassword,\n                iconClass: iconStyleText,\n                onChange: handlePasswordChange,\n                errors: formErrors['newPassword'],\n                updateValue: updateFormValue\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                placeholder: \"Confirm Password\",\n                divClass: \"col-lg-12\",\n                label: \"Confirm Password\",\n                name: 'confirmNewPassword',\n                type: passwordTypeConfirm,\n                clickeye: togglePasswordConfirm,\n                iconClass: iconStyleTextConfirm,\n                onChange: handlePasswordChangeConfirm,\n                errors: formErrors['confirmNewPassword'],\n                updateValue: updateFormValue\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"submit\",\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  className: \"btn btn-primary d-grid\",\n                  href: \"#\",\n                  onClick: resetPassword,\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center mt-4\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"text-primary ms-1\",\n                href: \"#\",\n                onClick: gotoLogin,\n                children: \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n}, \"sx2yCtl26aTa5396vl2uhMYv91A=\", false, function () {\n  return [useSearchParams, useConfiguration, useValidation, useDispatch, useNavigate];\n});","map":{"version":3,"sources":["D:/React_Project/DevOTWebUI_ReactTeam/src/components/ResetPassword/index.js"],"names":["Loader","TextField","React","useState","useEffect","useNavigate","useSearchParams","setLoadingPageTrue","setLoadingPageFalse","useDispatch","useConfiguration","requestUtil","useValidation","searchParams","setSearchParams","code","encodeURIComponent","get","config","errorMessage","setErrorMessage","formErrors","setFormErrors","validEmail","setValidEmail","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","userName","setUserName","url","baseUrl","validate","dispatch","navigate","document","title","EncryptedString","then","result","isEmailExist","email","message","catch","error","validateForm","name","data","valid","errors","customPasswordCheck","updateFormValue","target","value","resetPassword","event","preventDefault","password","gotoLogin","e","passwordType","setPasswordType","passwordInput","setPasswordInput","iconStyleText","seticonStyleText","handlePasswordChange","evnt","togglePassword","passwordTypeConfirm","setPasswordTypeConfirm","passwordInputConfirm","setPasswordInputConfirm","iconStyleTextConfirm","seticonStyleTextConfirm","handlePasswordChangeConfirm","togglePasswordConfirm"],"mappings":"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","sourcesContent":["import Loader from \"../common/Loader\";\nimport TextField from \"../common/TextField\";\nimport React, {useState, useEffect} from \"react\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useSearchParams} from \"react-router-dom\";\nimport {setLoadingPageTrue, setLoadingPageFalse} from \"../common/Loader/action\";\nimport {useDispatch} from \"react-redux\";\nimport useConfiguration from \"../../hooks/useConfiguration\";\nimport requestUtil from \"../../helpers/requestUtil\";\nimport useValidation from \"../../hooks/useValidation\";\n\nexport default () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const code = encodeURIComponent(searchParams.get(\"resetCode\"));\n    const config = useConfiguration();\n    const [errorMessage, setErrorMessage] = useState(null);\n    const [formErrors, setFormErrors] = useState({});\n    const [validEmail, setValidEmail] = useState(false);\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\n    const [userName, setUserName] = useState(\"\");\n    const url = config.baseUrl;\n    const validate = useValidation();\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    useEffect(() => {\n        document.title = \"Reset Password\";\n        if (code && url) {\n            dispatch(setLoadingPageTrue());\n            //requestUtil(`${url}/Candidates/validateaccountforforgetpassword?activationcode=${code}`, \"GET\").then((result) => {\n            requestUtil(`${url}/Candidates/validateaccountforforgetpasswordcandidate?activationcode=${code}`, \"POST\", {EncryptedString: code}).then((result) => {\n                dispatch(setLoadingPageFalse());\n                if (result && result.isEmailExist) {\n                    setValidEmail(true);\n                    setUserName(result.email);\n                } else {\n                    setErrorMessage(result.message);\n                }\n            }).catch((error) => {\n                dispatch(setLoadingPageFalse());\n                setErrorMessage(error.message || \"Something went wrong\");\n            });\n        }\n    }, [code, url])\n    const validateForm = () => {\n        const result = validate('resetPassword', [{name: 'newPassword', data: newPassword}, {\n            name: 'confirmNewPassword',\n            data: confirmNewPassword\n        }]);\n        if (result.valid) {\n            setFormErrors({});\n        } else {\n            setFormErrors(result.errors);\n        }\n        return result.valid;\n    }\n    const customPasswordCheck = () => {\n        if (newPassword && confirmNewPassword) {\n            if (newPassword !== confirmNewPassword) {\n                setFormErrors({'confirmNewPassword': [\"Password and Confirm Password must be same\"]});\n                return false;\n            }\n        }\n        return true;\n    }\n    const updateFormValue = (target) => {\n        if (target.name === \"newPassword\") {\n            setNewPassword(target.value);\n        } else if (target.name === \"confirmNewPassword\") {\n            setConfirmNewPassword(target.value);\n        }\n    }\n    const resetPassword = (event) => {\n        event.preventDefault();\n        if (validateForm() && customPasswordCheck()) {\n            dispatch(setLoadingPageTrue());\n            requestUtil(`${url}/Candidates/resetpassword/${userName}/${newPassword}`, \"POST\", {\n                password: formErrors.password\n            }).then((result) => {\n                dispatch(setLoadingPageFalse());\n                if (result && result.isEmailExist) {\n                    navigate(\"/\");\n                } else {\n                    setErrorMessage(result.message);\n                }\n            }).catch((error) => {\n                dispatch(setLoadingPageFalse());\n                setErrorMessage(error.message);\n            });\n        }\n    }\n    const gotoLogin = (e) => {\n        e.preventDefault();\n        navigate(\"/\");\n    }\n\n\n    const [passwordType, setPasswordType] = useState(\"password\");\n    const [passwordInput, setPasswordInput] = useState(\"\");\n    const [iconStyleText, seticonStyleText] = useState(\"zmdi zmdi-eye-off text-muted\");\n    const handlePasswordChange = (evnt) => {\n        setPasswordInput(evnt.target.value);\n    }\n    const togglePassword = () => {\n        if (passwordType === \"password\") {\n            setPasswordType(\"text\")\n            seticonStyleText(\"zmdi zmdi-eye text-muted\")\n            return;\n        }\n        setPasswordType(\"password\")\n        seticonStyleText(\"zmdi zmdi-eye-off text-muted\")\n    }\n\n    const [passwordTypeConfirm, setPasswordTypeConfirm] = useState(\"password\");\n    const [passwordInputConfirm, setPasswordInputConfirm] = useState(\"\");\n    const [iconStyleTextConfirm, seticonStyleTextConfirm] = useState(\"zmdi zmdi-eye-off text-muted\");\n    const handlePasswordChangeConfirm = (evnt) => {\n        setPasswordInputConfirm(evnt.target.value);\n    }\n    const togglePasswordConfirm = () => {\n        if (passwordTypeConfirm === \"password\") {\n            setPasswordTypeConfirm(\"text\")\n            seticonStyleTextConfirm(\"zmdi zmdi-eye text-muted\")\n            return;\n        }\n        setPasswordTypeConfirm(\"password\")\n        seticonStyleTextConfirm(\"zmdi zmdi-eye-off text-muted\")\n    }\n\n    return (\n        <div className=\"page\">\n            <Loader/>\n            <div className=\"\">\n                <div className=\"container-login100\">\n                    <div className=\"wrap-login100 p-6\">\n                        <form className=\"login100-form validate-form\">\n                            <span className=\"login100-form-title pb-5\">\n                                <a href=\"\">\n                                    <img src=\"assets/images/brand/logo-3.png\" className=\"header-brand-img\" alt=\"\"/>\n                                </a>\n                            </span>\n                            <span className=\"login100-form-title pb-5\">\n                                Password Reset\n                            </span>\n                            {\n                                errorMessage &&\n                                <>\n                                    <div\n                                        className=\"toast wrap-input100 align-items-center text-white bg-danger border-0 show\"\n                                        role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\" data-bs-autohide=\"false\">\n                                        <div className=\"d-flex\">\n                                            <div className=\"toast-body\">\n                                                {errorMessage || 'Reset password failed! Please try again.'}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div>&nbsp;</div>\n                                </>\n                            }\n                            {\n                                validEmail && <>\n                                    <TextField placeholder={\"Password\"} divClass={\"col-lg-12\"} label={\"New Password\"}\n                                               name={'newPassword'} type={passwordType} clickeye={togglePassword}\n                                               iconClass={iconStyleText} onChange={handlePasswordChange}\n                                               errors={formErrors['newPassword']}\n                                               updateValue={updateFormValue}/>\n\n\n                                    <TextField placeholder={\"Confirm Password\"} divClass={\"col-lg-12\"}\n                                               label={\"Confirm Password\"}\n                                               name={'confirmNewPassword'} type={passwordTypeConfirm}\n                                               clickeye={togglePasswordConfirm}\n                                               iconClass={iconStyleTextConfirm} onChange={handlePasswordChangeConfirm}\n                                               errors={formErrors['confirmNewPassword']} updateValue={updateFormValue}/>\n\n\n                                    <div className=\"submit\">\n                                        <a className=\"btn btn-primary d-grid\" href=\"#\" onClick={resetPassword}>Save</a>\n                                    </div>\n                                </>\n                            }\n                            <div className=\"text-center mt-4\">\n                                <a className=\"text-primary ms-1\" href=\"#\" onClick={gotoLogin}>Login</a>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}