{"ast":null,"code":"import { setResumeBuilderData, setNoResume, setWorkHistory, setEducation, setCertifications, addPrimaryCertification, removePrimaryCertification, setSpecialities, setEducationLevel, addPrimaryEmrEhr, removePrimaryEmrEhr, setEmrEhr, setResumeFile, addCategory, removeCategory, setMasterDatas } from './slice';\nimport { setError } from \"../slice\";\nimport { setLoading } from \"../../common/Loader/slice\";\nimport requestUtil from \"../../../helpers/requestUtil\";\nimport { nextTab } from \"../action\";\nimport { stateToServer } from './transformer';\nimport { updateProfileFlag } from \"../../Login/action\";\nexport function updateEducationLevel(level) {\n  return dispatch => {\n    dispatch(setEducationLevel(level));\n  };\n}\nexport function updateNoResume(data) {\n  return dispatch => {\n    dispatch(setNoResume(data));\n  };\n}\nexport function updateWorkHistory(workHistory) {\n  return dispatch => {\n    dispatch(setWorkHistory(workHistory));\n  };\n}\nexport function updateEducation(education) {\n  return dispatch => {\n    dispatch(setEducation(education));\n  };\n}\nexport function updateSpeciality(speciality) {\n  return dispatch => {\n    dispatch(setSpecialities(speciality));\n  };\n}\nexport function updatePrimaryCertification(cert, action) {\n  return dispatch => {\n    switch (action) {\n      case 'add':\n        dispatch(addPrimaryCertification(cert));\n        break;\n\n      case 'remove':\n        dispatch(removePrimaryCertification(cert));\n        break;\n\n      default:\n        break;\n    }\n  };\n}\nexport function updatePrimaryEmrEhr(emrEhr, action) {\n  return dispatch => {\n    switch (action) {\n      case 'add':\n        dispatch(addPrimaryEmrEhr(emrEhr));\n        break;\n\n      case 'remove':\n        dispatch(removePrimaryEmrEhr(emrEhr));\n        break;\n\n      default:\n        break;\n    }\n  };\n}\nexport function updateCategory(category, action) {\n  return dispatch => {\n    switch (action) {\n      case 'add':\n        dispatch(addCategory(category));\n        break;\n\n      case 'remove':\n        dispatch(removeCategory(category));\n        break;\n\n      default:\n        break;\n    }\n  };\n}\nexport function updateEmrEhr(emrEhr) {\n  return dispatch => {\n    dispatch(setEmrEhr(emrEhr));\n  };\n}\nexport function updateCertification(certification) {\n  return dispatch => {\n    dispatch(setCertifications(certification));\n  };\n}\nexport function getCurrentResumeBuilder(_ref) {\n  let {\n    url,\n    userId\n  } = _ref;\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const response = await requestUtil(`${url}/${userId}`, 'GET');\n      dispatch(setResumeBuilderData(response));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function saveResumeBuilder(_ref2) {\n  let {\n    url,\n    candidateId,\n    userId,\n    gotoNextTab = true\n  } = _ref2;\n  return async (dispatch, getState) => {\n    dispatch(setLoading(true));\n    const stateData = getState().resumeBuilder;\n    const transformedData = stateToServer(stateData, candidateId, userId);\n\n    try {\n      await requestUtil(`${url}/Candidates/savejobinfo`, 'POST', transformedData);\n\n      if (gotoNextTab) {\n        dispatch(nextTab());\n        dispatch(updateProfileFlag('isJobInfoCompleted'));\n      }\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function updateResumeFile(file) {\n  return dispatch => {\n    dispatch(setResumeFile(file));\n  };\n}\nexport function deleteResumeFile(baseUrl, candidateId, userId, resumeFile) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      await requestUtil(`${baseUrl}/Candidates/deletefile`, 'POST', {\n        candidateId,\n        userId,\n        resumeFileName: resumeFile,\n        fileType: 1\n      });\n      dispatch(updateResumeFile({\n        name: ''\n      }));\n      dispatch(setNoResume(true));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function loadMasterDatas(url, jobId) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const educationLevel = await requestUtil(`${url}/Dropdown/GetLevelOfEducations`, 'GET');\n      const jobCategories = await requestUtil(`${url}/Dropdown/getjobcategories/${jobId}`, 'GET');\n      const certifications = await requestUtil(`${url}/Dropdown/getcertifications/${jobId}`, 'GET');\n      const emrehr = await requestUtil(`${url}/Dropdown/getemrehrsystems/${jobId}`, 'GET');\n      const specialities = await requestUtil(`${url}/Dropdown/getspecialties/${jobId}`, 'GET');\n      dispatch(setMasterDatas({\n        educationLevel: educationLevel,\n        jobCategories,\n        certifications,\n        emrehr,\n        specialities\n      }));\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}\nexport function uploadResume(url, userId, file) {\n  return async dispatch => {\n    dispatch(setLoading(true));\n\n    try {\n      const formdata = new FormData();\n      formdata.append('file', file);\n      await requestUtil(`${url}/Candidates/resumeupload?CandidateId=${userId}`, 'POST', formdata, null, true);\n    } catch (error) {\n      dispatch(updateResumeFile({\n        name: ''\n      }));\n      dispatch(setError(error.message));\n    }\n\n    dispatch(setLoading(false));\n  };\n}","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI_LocalDevelopment/src/components/ProfileBuilder/ResumeBuilder/action.js"],"names":["setResumeBuilderData","setNoResume","setWorkHistory","setEducation","setCertifications","addPrimaryCertification","removePrimaryCertification","setSpecialities","setEducationLevel","addPrimaryEmrEhr","removePrimaryEmrEhr","setEmrEhr","setResumeFile","addCategory","removeCategory","setMasterDatas","setError","setLoading","requestUtil","nextTab","stateToServer","updateProfileFlag","updateEducationLevel","level","dispatch","updateNoResume","data","updateWorkHistory","workHistory","updateEducation","education","updateSpeciality","speciality","updatePrimaryCertification","cert","action","updatePrimaryEmrEhr","emrEhr","updateCategory","category","updateEmrEhr","updateCertification","certification","getCurrentResumeBuilder","url","userId","response","error","message","saveResumeBuilder","candidateId","gotoNextTab","getState","stateData","resumeBuilder","transformedData","updateResumeFile","file","deleteResumeFile","baseUrl","resumeFile","resumeFileName","fileType","name","loadMasterDatas","jobId","educationLevel","jobCategories","certifications","emrehr","specialities","uploadResume","formdata","FormData","append"],"mappings":"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","sourcesContent":["import {\n    setResumeBuilderData, setNoResume, setWorkHistory,\n    setEducation, setCertifications, addPrimaryCertification, removePrimaryCertification,\n    setSpecialities, setEducationLevel, addPrimaryEmrEhr, removePrimaryEmrEhr, setEmrEhr,\n    setResumeFile, addCategory, removeCategory, setMasterDatas\n} from './slice';\nimport {setError} from \"../slice\";\nimport {setLoading} from \"../../common/Loader/slice\";\nimport requestUtil from \"../../../helpers/requestUtil\";\nimport {nextTab} from \"../action\";\nimport {stateToServer} from './transformer';\nimport {updateProfileFlag} from \"../../Login/action\";\n\nexport function updateEducationLevel(level) {\n    return (dispatch) => {\n        dispatch(setEducationLevel(level));\n    }\n}\n\nexport function updateNoResume(data) {\n    return (dispatch) => {\n        dispatch(setNoResume(data));\n    };\n}\n\nexport function updateWorkHistory(workHistory) {\n    return (dispatch) => {\n        dispatch(setWorkHistory(workHistory));\n    };\n}\n\nexport function updateEducation(education) {\n    return (dispatch) => {\n        dispatch(setEducation(education));\n    };\n}\n\nexport function updateSpeciality(speciality) {\n    return (dispatch) => {\n        dispatch(setSpecialities(speciality));\n    };\n}\n\nexport function updatePrimaryCertification(cert, action) {\n    return (dispatch) => {\n        switch (action) {\n            case 'add':\n                dispatch(addPrimaryCertification(cert));\n                break;\n            case 'remove':\n                dispatch(removePrimaryCertification(cert));\n                break;\n            default:\n                break;\n        }\n    };\n}\n\nexport function updatePrimaryEmrEhr(emrEhr, action) {\n    return (dispatch) => {\n        switch (action) {\n            case 'add':\n                dispatch(addPrimaryEmrEhr(emrEhr));\n                break;\n            case 'remove':\n                dispatch(removePrimaryEmrEhr(emrEhr));\n                break;\n            default:\n                break;\n        }\n    };\n}\n\nexport function updateCategory(category, action) {\n    return (dispatch) => {\n        switch (action) {\n            case 'add':\n                dispatch(addCategory(category));\n                break;\n            case 'remove':\n                dispatch(removeCategory(category));\n                break;\n            default:\n                break;\n        }\n    };\n}\n\nexport function updateEmrEhr(emrEhr) {\n    return (dispatch) => {\n        dispatch(setEmrEhr(emrEhr));\n    };\n}\n\nexport function updateCertification(certification) {\n    return (dispatch) => {\n        dispatch(setCertifications(certification));\n    };\n}\n\nexport function getCurrentResumeBuilder({url, userId}) {\n    return async dispatch => {\n        dispatch(setLoading(true));\n        try {\n            const response = await requestUtil(`${url}/${userId}`, 'GET');\n            dispatch(setResumeBuilderData(response));\n        } catch (error) {\n            dispatch(setError(error.message))\n        }\n        dispatch(setLoading(false));\n    };\n}\n\nexport function saveResumeBuilder({url, candidateId, userId, gotoNextTab = true}) {\n    return async (dispatch, getState) => {\n        dispatch(setLoading(true));\n        const stateData = getState().resumeBuilder;\n        const transformedData = stateToServer(stateData, candidateId, userId);\n        try {\n            await requestUtil(`${url}/Candidates/savejobinfo`, 'POST', transformedData);\n            if (gotoNextTab) {\n                dispatch(nextTab());\n                dispatch(updateProfileFlag('isJobInfoCompleted'));\n            }\n        } catch (error) {\n            dispatch(setError(error.message))\n        }\n        dispatch(setLoading(false));\n    };\n}\n\nexport function updateResumeFile(file) {\n    return (dispatch) => {\n        dispatch(setResumeFile(file));\n    };\n}\n\nexport function deleteResumeFile(baseUrl, candidateId, userId, resumeFile) {\n    return async (dispatch) => {\n        dispatch(setLoading(true));\n        try {\n            await requestUtil(`${baseUrl}/Candidates/deletefile`, 'POST', {\n                candidateId,\n                userId,\n                resumeFileName: resumeFile,\n                fileType: 1\n            });\n            dispatch(updateResumeFile({\n                name: ''\n            }));\n            dispatch(setNoResume(true));\n        } catch (error) {\n            dispatch(setError(error.message))\n        }\n        dispatch(setLoading(false));\n    };\n}\n\nexport function loadMasterDatas(url, jobId) {\n    return async dispatch => {\n        dispatch(setLoading(true));\n        try {\n            const educationLevel = await requestUtil(`${url}/Dropdown/GetLevelOfEducations`, 'GET');\n            const jobCategories = await requestUtil(`${url}/Dropdown/getjobcategories/${jobId}`, 'GET');\n            const certifications = await requestUtil(`${url}/Dropdown/getcertifications/${jobId}`, 'GET');\n            const emrehr = await requestUtil(`${url}/Dropdown/getemrehrsystems/${jobId}`, 'GET');\n            const specialities = await requestUtil(`${url}/Dropdown/getspecialties/${jobId}`, 'GET');\n            dispatch(setMasterDatas({\n                educationLevel: educationLevel,\n                jobCategories,\n                certifications,\n                emrehr,\n                specialities\n            }));\n        } catch (error) {\n            dispatch(setError(error.message))\n        }\n        dispatch(setLoading(false));\n    };\n}\n\nexport function uploadResume(url, userId, file) {\n    return async dispatch => {\n        dispatch(setLoading(true));\n        try {\n            const formdata = new FormData();\n            formdata.append('file', file);\n            await requestUtil(`${url}/Candidates/resumeupload?CandidateId=${userId}`, 'POST', formdata, null, true);\n        } catch (error) {\n            dispatch(updateResumeFile({\n                name: ''\n            }));\n            dispatch(setError(error.message))\n        }\n        dispatch(setLoading(false));\n    };\n}\n"]},"metadata":{},"sourceType":"module"}