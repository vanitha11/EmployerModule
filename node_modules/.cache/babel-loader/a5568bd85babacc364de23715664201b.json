{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport useConfiguration from \"./useConfiguration\";\n\nfunction useValidation() {\n  _s();\n\n  const config = useConfiguration();\n\n  function validate(formName, values) {\n    const validationConfig = config.validations[formName];\n    const validationResult = {\n      valid: true,\n      errors: {}\n    };\n    values.map(value => {\n      const validationObj = validationConfig[value.name] || {};\n      validationResult.errors[value.name] = [];\n\n      if (validationObj.required && (!value.data || value.data.length === 0)) {\n        validationResult.errors[value.name].push(\"This field is required\");\n        validationResult.valid = false;\n      }\n\n      if (validationObj.min && value.data && value.data.length < validationObj.min) {\n        validationResult.errors[value.name].push(`At least ${validationObj.min} characters long`);\n        validationResult.valid = false;\n      }\n\n      if (validationObj.max && value.data && value.data.length > validationObj.max) {\n        validationResult.errors[value.name].push(`At most ${validationObj.max} characters long`);\n        validationResult.valid = false;\n      }\n\n      if (validationObj.pattern && value.data) {\n        const regex = new RegExp(validationObj.pattern);\n\n        if (!regex.test(value.data)) {\n          validationResult.errors[value.name].push(`This field has invalid pattern`);\n          validationResult.valid = false;\n        }\n      }\n    });\n    return validationResult;\n  }\n\n  return validate;\n}\n\n_s(useValidation, \"FH0EXNHWozJ2PEsmh9b8wzq3svM=\", false, function () {\n  return [useConfiguration];\n});\n\nexport default useValidation;","map":{"version":3,"sources":["D:/projects/Overture/DevOTWebUI/src/hooks/useValidation.js"],"names":["useConfiguration","useValidation","config","validate","formName","values","validationConfig","validations","validationResult","valid","errors","map","value","validationObj","name","required","data","length","push","min","max","pattern","regex","RegExp","test"],"mappings":";;AAAA,OAAOA,gBAAP,MAA6B,oBAA7B;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AACrB,QAAMC,MAAM,GAAGF,gBAAgB,EAA/B;;AACA,WAASG,QAAT,CAAkBC,QAAlB,EAA4BC,MAA5B,EAAoC;AAChC,UAAMC,gBAAgB,GAAGJ,MAAM,CAACK,WAAP,CAAmBH,QAAnB,CAAzB;AACA,UAAMI,gBAAgB,GAAG;AACrBC,MAAAA,KAAK,EAAE,IADc;AAErBC,MAAAA,MAAM,EAAE;AAFa,KAAzB;AAIAL,IAAAA,MAAM,CAACM,GAAP,CAAWC,KAAK,IAAI;AAChB,YAAMC,aAAa,GAAGP,gBAAgB,CAACM,KAAK,CAACE,IAAP,CAAhB,IAAgC,EAAtD;AACAN,MAAAA,gBAAgB,CAACE,MAAjB,CAAwBE,KAAK,CAACE,IAA9B,IAAsC,EAAtC;;AACA,UAAID,aAAa,CAACE,QAAd,KAA2B,CAACH,KAAK,CAACI,IAAP,IAAeJ,KAAK,CAACI,IAAN,CAAWC,MAAX,KAAsB,CAAhE,CAAJ,EAAwE;AACpET,QAAAA,gBAAgB,CAACE,MAAjB,CAAwBE,KAAK,CAACE,IAA9B,EAAoCI,IAApC,CAAyC,wBAAzC;AACAV,QAAAA,gBAAgB,CAACC,KAAjB,GAAyB,KAAzB;AACH;;AACD,UAAII,aAAa,CAACM,GAAd,IAAqBP,KAAK,CAACI,IAA3B,IAAmCJ,KAAK,CAACI,IAAN,CAAWC,MAAX,GAAoBJ,aAAa,CAACM,GAAzE,EAA8E;AAC1EX,QAAAA,gBAAgB,CAACE,MAAjB,CAAwBE,KAAK,CAACE,IAA9B,EAAoCI,IAApC,CAA0C,YAAWL,aAAa,CAACM,GAAI,kBAAvE;AACAX,QAAAA,gBAAgB,CAACC,KAAjB,GAAyB,KAAzB;AACH;;AACD,UAAII,aAAa,CAACO,GAAd,IAAqBR,KAAK,CAACI,IAA3B,IAAmCJ,KAAK,CAACI,IAAN,CAAWC,MAAX,GAAoBJ,aAAa,CAACO,GAAzE,EAA8E;AAC1EZ,QAAAA,gBAAgB,CAACE,MAAjB,CAAwBE,KAAK,CAACE,IAA9B,EAAoCI,IAApC,CAA0C,WAAUL,aAAa,CAACO,GAAI,kBAAtE;AACAZ,QAAAA,gBAAgB,CAACC,KAAjB,GAAyB,KAAzB;AACH;;AACD,UAAII,aAAa,CAACQ,OAAd,IAAyBT,KAAK,CAACI,IAAnC,EAAyC;AACrC,cAAMM,KAAK,GAAG,IAAIC,MAAJ,CAAWV,aAAa,CAACQ,OAAzB,CAAd;;AACA,YAAI,CAACC,KAAK,CAACE,IAAN,CAAWZ,KAAK,CAACI,IAAjB,CAAL,EAA6B;AACzBR,UAAAA,gBAAgB,CAACE,MAAjB,CAAwBE,KAAK,CAACE,IAA9B,EAAoCI,IAApC,CAA0C,gCAA1C;AACAV,UAAAA,gBAAgB,CAACC,KAAjB,GAAyB,KAAzB;AACH;AACJ;AACJ,KAtBD;AAuBA,WAAOD,gBAAP;AACH;;AACD,SAAOL,QAAP;AACH;;GAlCQF,a;UACUD,gB;;;AAkCnB,eAAeC,aAAf","sourcesContent":["import useConfiguration from \"./useConfiguration\";\n\nfunction useValidation() {\n    const config = useConfiguration();\n    function validate(formName, values) {\n        const validationConfig = config.validations[formName];\n        const validationResult = {\n            valid: true,\n            errors: {}\n        };\n        values.map(value => {\n            const validationObj = validationConfig[value.name] || {};\n            validationResult.errors[value.name] = [];\n            if (validationObj.required && (!value.data || value.data.length === 0)) {\n                validationResult.errors[value.name].push(\"This field is required\");\n                validationResult.valid = false;\n            }\n            if (validationObj.min && value.data && value.data.length < validationObj.min) {\n                validationResult.errors[value.name].push(`At least ${validationObj.min} characters long`);\n                validationResult.valid = false;\n            }\n            if (validationObj.max && value.data && value.data.length > validationObj.max) {\n                validationResult.errors[value.name].push(`At most ${validationObj.max} characters long`);\n                validationResult.valid = false;\n            }\n            if (validationObj.pattern && value.data) {\n                const regex = new RegExp(validationObj.pattern);\n                if (!regex.test(value.data)) {\n                    validationResult.errors[value.name].push(`This field has invalid pattern`);\n                    validationResult.valid = false;\n                }\n            }\n        });\n        return validationResult;\n    }\n    return validate;\n}\nexport default useValidation;\n"]},"metadata":{},"sourceType":"module"}